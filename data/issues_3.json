[ {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/91",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/91/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/91/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/91/events",
  "html_url" : "https://github.com/junit-team/junit/issues/91",
  "id" : 144566,
  "number" : 91,
  "title" : "How can I turnoff the logs",
  "user" : {
    "login" : "kalagarlap",
    "id" : 215642,
    "avatar_url" : "https://avatars.githubusercontent.com/u/215642?",
    "gravatar_id" : "fd645d92cccad5fb07f33cc731151976",
    "url" : "https://api.github.com/users/kalagarlap",
    "html_url" : "https://github.com/kalagarlap",
    "followers_url" : "https://api.github.com/users/kalagarlap/followers",
    "following_url" : "https://api.github.com/users/kalagarlap/following{/other_user}",
    "gists_url" : "https://api.github.com/users/kalagarlap/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/kalagarlap/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/kalagarlap/subscriptions",
    "organizations_url" : "https://api.github.com/users/kalagarlap/orgs",
    "repos_url" : "https://api.github.com/users/kalagarlap/repos",
    "events_url" : "https://api.github.com/users/kalagarlap/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/kalagarlap/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-03-04T13:20:34Z",
  "updated_at" : "2011-03-04T16:04:00Z",
  "closed_at" : "2011-03-04T16:04:00Z",
  "body" : "Hi,\r\n\r\nWhen I am running the junit tests, lot of debug trace statements are printing on console. Does anyone idea, how to turn off them.\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/92",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/92/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/92/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/92/events",
  "html_url" : "https://github.com/junit-team/junit/issues/92",
  "id" : 146807,
  "number" : 92,
  "title" : "Access to build listeners from @Rule (MethodRule).",
  "user" : {
    "login" : "dweiss",
    "id" : 199470,
    "avatar_url" : "https://avatars.githubusercontent.com/u/199470?",
    "gravatar_id" : "3dbfa61ff0ef4f9122da3777f5d8f479",
    "url" : "https://api.github.com/users/dweiss",
    "html_url" : "https://github.com/dweiss",
    "followers_url" : "https://api.github.com/users/dweiss/followers",
    "following_url" : "https://api.github.com/users/dweiss/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dweiss/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dweiss/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dweiss/subscriptions",
    "organizations_url" : "https://api.github.com/users/dweiss/orgs",
    "repos_url" : "https://api.github.com/users/dweiss/repos",
    "events_url" : "https://api.github.com/users/dweiss/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dweiss/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-03-08T16:21:15Z",
  "updated_at" : "2013-04-24T15:27:41Z",
  "closed_at" : "2013-04-24T15:27:41Z",
  "body" : "It would be useful to gain access to the test process lifecycle somehow from the MethodRule implementation. Specifically, detecting the end of all tests seems like a very important event."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/93",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/93/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/93/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/93/events",
  "html_url" : "https://github.com/junit-team/junit/issues/93",
  "id" : 149288,
  "number" : 93,
  "title" : "Categories + BeforeClass",
  "user" : {
    "login" : "psenger",
    "id" : 211395,
    "avatar_url" : "https://avatars.githubusercontent.com/u/211395?",
    "gravatar_id" : "e33eebfa68659d4d6e8e9f014f1ed1fe",
    "url" : "https://api.github.com/users/psenger",
    "html_url" : "https://github.com/psenger",
    "followers_url" : "https://api.github.com/users/psenger/followers",
    "following_url" : "https://api.github.com/users/psenger/following{/other_user}",
    "gists_url" : "https://api.github.com/users/psenger/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/psenger/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/psenger/subscriptions",
    "organizations_url" : "https://api.github.com/users/psenger/orgs",
    "repos_url" : "https://api.github.com/users/psenger/repos",
    "events_url" : "https://api.github.com/users/psenger/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/psenger/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 20,
  "created_at" : "2010-03-11T19:13:12Z",
  "updated_at" : "2014-01-07T22:53:24Z",
  "closed_at" : "2014-01-07T22:53:24Z",
  "body" : "It would be nice if we could govern the test harness state with categories ( refer to the example ). However, it would appear the Categories Test Runner does not pick up the Before Class annotation or at least can not discern between the presences of two. Is this a bug Mr. Beck?  Thanks for you support. Best Regards, Philip A Senger\r\n <pre>\r\n-----------------------------------\r\nimport org.junit.runner.*;\r\nimport org.junit.experimental.categories.*;\r\nimport org.junit.runners.*;\r\n@RunWith(Categories.class)\r\n@Categories.IncludeCategory(Development.class)\r\n@Suite.SuiteClasses({MytestClass.class})\r\npublic class Development\r\n{\r\n}\r\n-----------------------------------\r\nimport org.junit.runner.*;\r\nimport org.junit.experimental.categories.*;\r\nimport org.junit.runners.*;\r\n@RunWith(Categories.class)\r\n@Categories.IncludeCategory(Stage.class)\r\n@Suite.SuiteClasses({MytestClass.class})\r\npublic class Stage\r\n{\r\n}\r\n-----------------------------------\r\nimport org.junit.experimental.categories.*;\r\nimport org.junit.*;\r\npublic class MytestClass\r\n{\r\n  private static String color = null;\r\n  /**\r\n   * Looks like the BeforeClass is not subject to the Categories strategy.\r\n   **/\r\n  @Category({Development.class})\r\n  @BeforeClass\r\n  public static void setupAllTestsDev()\r\n  {\r\n    color = \"red\";\r\n  }\r\n  /**\r\n   * Looks like the BeforeClass is not subject to the Categories strategy.\r\n   **/\r\n  @Category({Stage.class})\r\n  @BeforeClass\r\n  public static void setupAllTestsStage()\r\n  {\r\n     color = \"blue\";\r\n  }\r\n  @Category({Stage.class})\r\n  @Test\r\n  public void testStageColor () {\r\n    Assert.assertEquals(\"The color is not blue\", \"blue\", color );\r\n  }\r\n  @Category({Development.class})\r\n  @Test\r\n  public void testDevColor () {\r\n    Assert.assertEquals(\"The color is not red\", \"red\", color );\r\n  }\r\n}\r\n</pre>"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/94",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/94/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/94/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/94/events",
  "html_url" : "https://github.com/junit-team/junit/issues/94",
  "id" : 155895,
  "number" : 94,
  "title" : "FAQ has a dead link",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-03-22T14:06:46Z",
  "updated_at" : "2010-05-04T02:40:55Z",
  "closed_at" : "2010-05-04T02:40:55Z",
  "body" : "Hi,\r\n\r\nIf you go to Getting Started, then to the Frequently Asked Questions section, down at the bottom you get the link to IDE integration page, but it's a dead link:\r\nIDE integration instructions\r\n\r\nRegards,\r\nUri"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/95",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/95/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/95/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/95/events",
  "html_url" : "https://github.com/junit-team/junit/issues/95",
  "id" : 158090,
  "number" : 95,
  "title" : "Enhancement: BigDecimal support for assertEquals()",
  "user" : {
    "login" : "pbenedict",
    "id" : 229913,
    "avatar_url" : "https://avatars.githubusercontent.com/u/229913?",
    "gravatar_id" : "16a5711ba9cf417638a66d825532d3e1",
    "url" : "https://api.github.com/users/pbenedict",
    "html_url" : "https://github.com/pbenedict",
    "followers_url" : "https://api.github.com/users/pbenedict/followers",
    "following_url" : "https://api.github.com/users/pbenedict/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pbenedict/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pbenedict/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pbenedict/subscriptions",
    "organizations_url" : "https://api.github.com/users/pbenedict/orgs",
    "repos_url" : "https://api.github.com/users/pbenedict/repos",
    "events_url" : "https://api.github.com/users/pbenedict/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pbenedict/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 23,
  "created_at" : "2010-03-25T03:05:15Z",
  "updated_at" : "2014-03-17T15:46:05Z",
  "closed_at" : "2014-01-29T05:08:44Z",
  "body" : "Using JUnit to test BigDecimal values is always a sore point. It is because BigDecimal considers precision using equals() but ignores it in compareTo(). The best way to handle this would be a new assertEquals method that allows precision to be optionally evaluated. You can also add an alternative method that accepts a message:\r\n\r\npublic static void assertEquals(BigDecimal expected, BigDecimal actual, boolean precisionMatters) {\r\n    if (precisionMatters) {\r\n        Assert.assertEquals(expected, actual);\r\n    } else {\r\n        Assert.assertEquals(0, expected.compareTo(actual));\r\n    }\r\n}"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/96",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/96/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/96/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/96/events",
  "html_url" : "https://github.com/junit-team/junit/issues/96",
  "id" : 163277,
  "number" : 96,
  "title" : "TestSuite(MyTestCase.class) should dynamically detect if MyTestCase is a TestCase",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-04-01T17:50:53Z",
  "updated_at" : "2010-04-08T15:52:08Z",
  "closed_at" : "2010-04-08T15:52:08Z",
  "body" : "Currently, passing the TestSuite constructor a single testclass that is not statically guaranteed to be a TestCase calls the varargs constructor TestSuite (Class<?>... classes), rather than an analogue of the single-class constructor TestSuite(final Class<? extends TestCase> theClass).\r\n\r\nThis leads to unexpected changes in behavior for custom subclasses of BaseTestRunner between 4.5 and 4.8.1"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/97",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/97/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/97/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/97/events",
  "html_url" : "https://github.com/junit-team/junit/issues/97",
  "id" : 167112,
  "number" : 97,
  "title" : "Feature Request: @IgnoreFailure annotation for @Test methods",
  "user" : {
    "login" : "jamesmhall",
    "id" : 239036,
    "avatar_url" : "https://avatars.githubusercontent.com/u/239036?",
    "gravatar_id" : "d6acd5bafb13813c16f2ad9b680b1208",
    "url" : "https://api.github.com/users/jamesmhall",
    "html_url" : "https://github.com/jamesmhall",
    "followers_url" : "https://api.github.com/users/jamesmhall/followers",
    "following_url" : "https://api.github.com/users/jamesmhall/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jamesmhall/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jamesmhall/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jamesmhall/subscriptions",
    "organizations_url" : "https://api.github.com/users/jamesmhall/orgs",
    "repos_url" : "https://api.github.com/users/jamesmhall/repos",
    "events_url" : "https://api.github.com/users/jamesmhall/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jamesmhall/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-04-07T22:07:17Z",
  "updated_at" : "2010-04-07T22:53:09Z",
  "closed_at" : "2010-04-07T22:53:09Z",
  "body" : "For development teams using Test-Driven Development or Test-First Design, it would be ideal to include failing tests in the same class as existing unit tests.  However, many teams use continuous integration and have their builds set to fail if any unit tests fail or error.  It is possible to separate failing tests into different classes that are ignored by one target, but not by a TDD specific target in Ant or Maven.  However, this requires teams to move tests from one class to another at the end of the iteration.  While @Ignore simply skips the test, it would be nice to have an @IgnoreFailure that would run and report on the failing test, but not signal the build to halt. I am not sure if this would require coordination with Surefire Plugin, but I think it would improve the TDD process for Java."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/98",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/98/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/98/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/98/events",
  "html_url" : "https://github.com/junit-team/junit/issues/98",
  "id" : 180725,
  "number" : 98,
  "title" : "assumeTrue() does not work with expected exceptions",
  "user" : {
    "login" : "jonas22",
    "id" : 254335,
    "avatar_url" : "https://avatars.githubusercontent.com/u/254335?",
    "gravatar_id" : "f40a9812290946439f2cc2f92a6f4e7b",
    "url" : "https://api.github.com/users/jonas22",
    "html_url" : "https://github.com/jonas22",
    "followers_url" : "https://api.github.com/users/jonas22/followers",
    "following_url" : "https://api.github.com/users/jonas22/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jonas22/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jonas22/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jonas22/subscriptions",
    "organizations_url" : "https://api.github.com/users/jonas22/orgs",
    "repos_url" : "https://api.github.com/users/jonas22/repos",
    "events_url" : "https://api.github.com/users/jonas22/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jonas22/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-04-27T11:21:28Z",
  "updated_at" : "2013-08-01T07:00:56Z",
  "closed_at" : "2010-05-04T02:25:05Z",
  "body" : "assumeTrue() does not work if a test has an expected exception.\n\nExample code:\n\n    import static org.junit.Assume.*;\n    import org.junit.Test;\n    \n    public class TestAssume {\n        @Test(expected = IllegalArgumentException.class)\n        public void test() {\n            assumeTrue(false);\n        }\n    }\n\n\nThis exception is thrown by JUnit 4.8.1:\n\n    java.lang.Exception: Unexpected exception, expected<java.lang.IllegalArgumentException> but was<org.junit.internal.AssumptionViolatedException>\n        at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        [...]"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/99",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/99/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/99/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/99/events",
  "html_url" : "https://github.com/junit-team/junit/issues/99",
  "id" : 181716,
  "number" : 99,
  "title" : "Add a method to org.junit.Assert to fail a test if a given exception is not thrown",
  "user" : {
    "login" : "geyroulet",
    "id" : 255478,
    "avatar_url" : "https://avatars.githubusercontent.com/u/255478?",
    "gravatar_id" : "a12f477c8580d9857827ae0d825ba30a",
    "url" : "https://api.github.com/users/geyroulet",
    "html_url" : "https://github.com/geyroulet",
    "followers_url" : "https://api.github.com/users/geyroulet/followers",
    "following_url" : "https://api.github.com/users/geyroulet/following{/other_user}",
    "gists_url" : "https://api.github.com/users/geyroulet/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/geyroulet/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/geyroulet/subscriptions",
    "organizations_url" : "https://api.github.com/users/geyroulet/orgs",
    "repos_url" : "https://api.github.com/users/geyroulet/repos",
    "events_url" : "https://api.github.com/users/geyroulet/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/geyroulet/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2010-04-28T09:29:23Z",
  "updated_at" : "2013-05-14T14:54:37Z",
  "closed_at" : "2013-05-14T14:54:37Z",
  "body" : "With a \"Classic Try-Catch Structure\" (as described at http://radio.javaranch.com/lasse/2007/05/17/1179405760728.html), I often write this kind of code:\r\n\r\npublic void someTest() {\t\r\n  ...\r\n\ttry {\r\n    methodMustThrowAnException();\r\n\t\tfail(ExpectedExceptionThatMustBeThrownByAboveMethod.class + \" expected\");\r\n\t} catch (ExpectedExceptionThatMustBeThrownByAboveMethod e) {\r\n\t}\r\n\t...\r\n}\r\n\r\nIt would be more convenient and readable to add such a method into org.junit.Assert\r\n\r\n\t/**\r\n\t * Fail the test if an exception of a given type is not thrown.\r\n\t * @param the expected throwable class\t \r\n\t */\r\n\tpublic static void failIfNotThrown(final Class<? extends Throwable> throwableClass) {\r\n\t\tfail(throwableClass + \" expected\");\r\n\t}\r\n\r\nThe code would become\t\r\n\t\r\npublic void someTest() {\t\r\n  ...\r\n\ttry {\r\n    methodMustThrowAnException();\r\n\t\tfailIfNotThrown(ExpectedExceptionThatMustBeThrownByAboveMethod.class);\r\n\t} catch (ExpectedExceptionThatMustBeThrownByAboveMethod e) {\r\n\t}\r\n\t...\r\n}"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/101",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/101/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/101/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/101/events",
  "html_url" : "https://github.com/junit-team/junit/issues/101",
  "id" : 184350,
  "number" : 101,
  "title" : "Enhancement: Make the Description, Failure and Result serializable",
  "user" : {
    "login" : "rojotek",
    "id" : 261271,
    "avatar_url" : "https://avatars.githubusercontent.com/u/261271?",
    "gravatar_id" : "b3e9e3c5a34016519021b9a224abe612",
    "url" : "https://api.github.com/users/rojotek",
    "html_url" : "https://github.com/rojotek",
    "followers_url" : "https://api.github.com/users/rojotek/followers",
    "following_url" : "https://api.github.com/users/rojotek/following{/other_user}",
    "gists_url" : "https://api.github.com/users/rojotek/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/rojotek/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/rojotek/subscriptions",
    "organizations_url" : "https://api.github.com/users/rojotek/orgs",
    "repos_url" : "https://api.github.com/users/rojotek/repos",
    "events_url" : "https://api.github.com/users/rojotek/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/rojotek/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 9,
  "created_at" : "2010-05-01T10:24:28Z",
  "updated_at" : "2013-10-10T11:57:38Z",
  "closed_at" : "2013-10-10T11:57:38Z",
  "body" : "I have an environment where I want to run tests using RMI.  I've written a simple RMIServer that wraps the JUnitCore, and does the environment setup work that is required for my server environment.  I'd like to delegate the processing of the results to the client.\n\nIn order to do this I would like to have the Result object graph serializable. \n\nI've tried the change out on the main trunk from github, and saw that the changes were to make\n`org.junit.runner.Description`, `org.junit.runner.notification.Failure`, and `org.junit.runner.Result` implement serializable, adding a serialVersionUID to each of these classes.\n\nIt would be this added back into the main codebase.\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/102",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/102/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/102/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/102/events",
  "html_url" : "https://github.com/junit-team/junit/issues/102",
  "id" : 185392,
  "number" : 102,
  "title" : "EasyMock JUnit Rule for automatic verify",
  "user" : {
    "login" : "bbrouwer",
    "id" : 263089,
    "avatar_url" : "https://avatars.githubusercontent.com/u/263089?",
    "gravatar_id" : "08493b36d23473714353ddb8000544df",
    "url" : "https://api.github.com/users/bbrouwer",
    "html_url" : "https://github.com/bbrouwer",
    "followers_url" : "https://api.github.com/users/bbrouwer/followers",
    "following_url" : "https://api.github.com/users/bbrouwer/following{/other_user}",
    "gists_url" : "https://api.github.com/users/bbrouwer/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/bbrouwer/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/bbrouwer/subscriptions",
    "organizations_url" : "https://api.github.com/users/bbrouwer/orgs",
    "repos_url" : "https://api.github.com/users/bbrouwer/repos",
    "events_url" : "https://api.github.com/users/bbrouwer/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/bbrouwer/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-05-03T12:56:32Z",
  "updated_at" : "2010-05-03T16:02:43Z",
  "closed_at" : "2010-05-03T13:16:42Z",
  "body" : "I tried out the new JUnit @Rule feature to setup an IMocksControl from EasyMock to automatically verify my mocks at the end of a test. It turns out that it works pretty well. The syntax ends up looking like this:\r\n\r\npublic class MyTest {\r\n  @Rule public EasyMockRule mocks = new EasyMockRule();\r\n  InterfaceToMock theMock = mocks.createMock(InterfaceToMock.class);\r\n  SomeObject objectToTest = new SomeObject(theMock);\r\n\r\n  @Test\r\n  public void testStuff() {\r\n    expect(theMock.doStuff()).andReturn(\"stuff\");\r\n    mocks.replay();\r\n    assertEquals(\"stuff\", objectToTest.doIt());\r\n  }\r\n}\r\n\r\nThere are a couple of interesting things to notice. If the object that you are testing allows the mocks to be provided through the constructor (i.e. constructor injection), then you can do away with the @Before method entirely.\r\n\r\nSecondly, this will automatically call mocks.verify() at the end of your test. How often have you forgotten to verify your mocks? Well, now you don't have to. Additionally, it implicitly does mocks.reset() before the test.\r\n\r\nIf you need more control over which IMocksControl to use, just give it an existing IMocksControl so you can do this: \r\n\r\n@Rule public EasyMockRule mocks = new EasyMockRule(createNiceControl());\r\n\r\nAnother nice point is that EasyMockRule runs before and after the @Before and @After methods. This way you can put things in @Before and @After to, for example, stub some of the mocked methods.\r\n\r\nI thought that this would be a nice addition to JUnit. All you have to do is have EasyMockRule implement IMocksControl and org.junit.rules.MethodRule.\r\n\r\nTo make it so JUnit doesn't require EasyMock on the classpath, just have it mark the EasyMock dependency in the pom.xml as an optional dependency. As long as nobody tries to instantiate that class, they can still use some other mock framework just as they do today.\r\n\r\nThe only other thing that this EasyMockRule object needs to be aware of is if it is in record mode. This way if a particular test doesn't ever do mocks.replay(), it won't fail the test. This was handled by a simple boolean variable.\r\n\r\nSo, what do people think? I would love to submit this as an enhancement to JUnit."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/103",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/103/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/103/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/103/events",
  "html_url" : "https://github.com/junit-team/junit/issues/103",
  "id" : 186143,
  "number" : 103,
  "title" : "Move FAQ to github pages",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-05-04T02:40:20Z",
  "updated_at" : "2011-03-04T16:16:26Z",
  "closed_at" : "2011-03-04T16:16:26Z",
  "body" : ""
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/104",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/104/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/104/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/104/events",
  "html_url" : "https://github.com/junit-team/junit/issues/104",
  "id" : 197748,
  "number" : 104,
  "title" : "Parameterized: data() returns Collection<Object[]>, which in Parameterized.getParametersList() is cast to List<Object[]>",
  "user" : {
    "login" : "mlauritse",
    "id" : 219862,
    "avatar_url" : "https://avatars.githubusercontent.com/u/219862?",
    "gravatar_id" : "8186d8168a1cb81207fad85a3d50d4dc",
    "url" : "https://api.github.com/users/mlauritse",
    "html_url" : "https://github.com/mlauritse",
    "followers_url" : "https://api.github.com/users/mlauritse/followers",
    "following_url" : "https://api.github.com/users/mlauritse/following{/other_user}",
    "gists_url" : "https://api.github.com/users/mlauritse/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/mlauritse/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/mlauritse/subscriptions",
    "organizations_url" : "https://api.github.com/users/mlauritse/orgs",
    "repos_url" : "https://api.github.com/users/mlauritse/repos",
    "events_url" : "https://api.github.com/users/mlauritse/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/mlauritse/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/parameterized",
    "name" : "parameterized",
    "color" : "0052cc"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 0,
  "created_at" : "2010-05-17T20:14:55Z",
  "updated_at" : "2014-02-12T15:31:27Z",
  "closed_at" : "2011-12-31T13:03:42Z",
  "body" : "First of all, I was very happy to discover the Parameterized runner today, I came very close to reverting to a JUnit 3 Suite, but stumbled on this very elegant solution to a common enough problem - dynamically configuring a bunch of tests whose results should be reported separately.\r\n \r\n@Parameters data() returns Collection<Object[]>, but in Parameterized.getParametersList(), this collection is immediately cast to List<Object>. This is unfortunate if the Collection is not a List.\r\n\r\nA simple workaround is to simply return a list from data(), but really, I think this is unnecessarily confusing, and I don't see any reason why Parameterized would care what kind of Collection this is.\r\n\r\nHere's an example which demonstrates the issue:\r\n\r\n@RunWith(Parameterized.class)\r\npublic class PersistentEntityTest {\r\n    private final String entity;\r\n \r\n    public PersistentEntityTest(String entity) {\r\n        this.entity = entity;\r\n    }\r\n \r\n    @Test\r\n    public void test() {\r\n        Assert.assertEquals(\"testEntity\", this.entity);\r\n    }\r\n \r\n    @Parameters\r\n    public static Collection<Object[]> data() {\r\n        return Collections.singleton(new Object[] { \"testEntity\" });\r\n    }\r\n}\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/105",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/105/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/105/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/105/events",
  "html_url" : "https://github.com/junit-team/junit/issues/105",
  "id" : 198099,
  "number" : 105,
  "title" : "NoSuchMethodError has occured when call assertThat(true,is(true))",
  "user" : {
    "login" : "kompiro",
    "id" : 42963,
    "avatar_url" : "https://avatars.githubusercontent.com/u/42963?",
    "gravatar_id" : "e7bf914803991968f32535ff47cee5d2",
    "url" : "https://api.github.com/users/kompiro",
    "html_url" : "https://github.com/kompiro",
    "followers_url" : "https://api.github.com/users/kompiro/followers",
    "following_url" : "https://api.github.com/users/kompiro/following{/other_user}",
    "gists_url" : "https://api.github.com/users/kompiro/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/kompiro/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/kompiro/subscriptions",
    "organizations_url" : "https://api.github.com/users/kompiro/orgs",
    "repos_url" : "https://api.github.com/users/kompiro/repos",
    "events_url" : "https://api.github.com/users/kompiro/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/kompiro/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-05-18T08:22:13Z",
  "updated_at" : "2010-05-21T15:48:07Z",
  "closed_at" : "2010-05-21T15:48:07Z",
  "body" : "assertThat is simple api but not supported to call assertThat(true,org.hamcrest.Matcher.is(true)).\r\nI'm using JUnit 4.8.1 . The JAR got from maven repository. I think the behavior was changed after 4.8 release.\r\nI hope to fix it."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/106",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/106/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/106/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/106/events",
  "html_url" : "https://github.com/junit-team/junit/issues/106",
  "id" : 203688,
  "number" : 106,
  "title" : "Allow @Test, @Before etc. methods to have lower visibility than public",
  "user" : {
    "login" : "galet",
    "id" : 203179,
    "avatar_url" : "https://avatars.githubusercontent.com/u/203179?",
    "gravatar_id" : "6cc73d22edc366320d0e0a7d554df085",
    "url" : "https://api.github.com/users/galet",
    "html_url" : "https://github.com/galet",
    "followers_url" : "https://api.github.com/users/galet/followers",
    "following_url" : "https://api.github.com/users/galet/following{/other_user}",
    "gists_url" : "https://api.github.com/users/galet/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/galet/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/galet/subscriptions",
    "organizations_url" : "https://api.github.com/users/galet/orgs",
    "repos_url" : "https://api.github.com/users/galet/repos",
    "events_url" : "https://api.github.com/users/galet/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/galet/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-05-22T15:56:55Z",
  "updated_at" : "2010-05-24T14:17:32Z",
  "closed_at" : "2010-05-24T14:17:32Z",
  "body" : "The JUnit framework requires that all test classes, @Test and @Before/@After/@BeforeClass etc. methods are public. The test classes are then very verbose. \r\n\r\nWhat do you think about removing this restriction? The test methods are rarely called outside their package (besides JUnit framework) and it should be up to the developer if he wants to publish test methods in public scope."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/107",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/107/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/107/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/107/events",
  "html_url" : "https://github.com/junit-team/junit/issues/107",
  "id" : 209267,
  "number" : 107,
  "title" : "java.lang.RuntimeException: Stub! \tat junit.framework.TestSuite.<init>(TestSuite.java:7)",
  "user" : {
    "login" : "jsiddharth",
    "id" : 290584,
    "avatar_url" : "https://avatars.githubusercontent.com/u/290584?",
    "gravatar_id" : "b7d46191dbad1b43aa357073e4e47e08",
    "url" : "https://api.github.com/users/jsiddharth",
    "html_url" : "https://github.com/jsiddharth",
    "followers_url" : "https://api.github.com/users/jsiddharth/followers",
    "following_url" : "https://api.github.com/users/jsiddharth/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jsiddharth/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jsiddharth/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jsiddharth/subscriptions",
    "organizations_url" : "https://api.github.com/users/jsiddharth/orgs",
    "repos_url" : "https://api.github.com/users/jsiddharth/repos",
    "events_url" : "https://api.github.com/users/jsiddharth/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jsiddharth/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-05-29T09:54:03Z",
  "updated_at" : "2011-03-04T16:13:35Z",
  "closed_at" : "2011-03-04T16:13:35Z",
  "body" : "Code Snippet\r\nmport junit.framework.TestCase;\r\nimport junit.framework.TestSuite;\r\n\r\npublic class TestSuitemCruiseOnServer extends TestSuite {\r\n\tprivate TestCase hibernateTest ;\r\n\tpublic TestSuitemCruiseOnServer() {\r\n\t\tsuper () ;\r\n\t\thibernateTest = new HibernateConnectionTestCase(\"HibernateConnection\") ;\r\n\t}\r\n\tpublic void main(String args[]) {\r\n\t\tTestSuite mCruiseOnServerTestSuite = new TestSuitemCruiseOnServer() ;\r\n\t\tmCruiseOnServerTestSuite.addTest(hibernateTest) ;\r\n\t}\r\n\r\n\r\npackage com.mcruiseon.server.hibernate.test;\r\n\r\nimport java.util.ArrayList;\r\nimport org.hibernate.SessionFactory;\r\nimport com.mcruiseon.server.hibernate.HibernateSessionFactory;\r\nimport com.mcruiseon.server.hibernate.database.tables.DeviceTableRow;\r\nimport junit.framework.TestCase;\r\n\r\npublic class HibernateConnectionTestCase extends TestCase {\r\n\tpublic HibernateConnectionTestCase(String name) {\r\n\t\tsuper (name) ; \r\n\t}\r\n\t\r\n\tSessionFactory hSession = null ;\r\n\tDeviceTableRow deviceTableRow = null ;\r\n\tpublic void testConnectionSetup() {\r\n\t\thSession = HibernateSessionFactory.getInstance() ;\r\n\t\tassertNotNull(hSession) ;\r\n\t\tdeviceTableRow = new DeviceTableRow(hSession.getCurrentSession()) ;\r\n\t}\r\n\r\n\r\nI am using junit3.jar, hibernate3 and mysql-connector-java-5.1.12-bin.jar in the same project.\r\n\r\nI checked TestSuite.java line 7, could not make out anything. I wonder what I am missing.\r\n\r\nSiddharth"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/108",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/108/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/108/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/108/events",
  "html_url" : "https://github.com/junit-team/junit/issues/108",
  "id" : 212579,
  "number" : 108,
  "title" : "The ability to add a single test to a TestSuite.",
  "user" : {
    "login" : "bigmikef",
    "id" : 65827,
    "avatar_url" : "https://avatars.githubusercontent.com/u/65827?",
    "gravatar_id" : "782b6fada022deb42b0b2a1b59b60904",
    "url" : "https://api.github.com/users/bigmikef",
    "html_url" : "https://github.com/bigmikef",
    "followers_url" : "https://api.github.com/users/bigmikef/followers",
    "following_url" : "https://api.github.com/users/bigmikef/following{/other_user}",
    "gists_url" : "https://api.github.com/users/bigmikef/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/bigmikef/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/bigmikef/subscriptions",
    "organizations_url" : "https://api.github.com/users/bigmikef/orgs",
    "repos_url" : "https://api.github.com/users/bigmikef/repos",
    "events_url" : "https://api.github.com/users/bigmikef/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/bigmikef/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-06-02T15:23:51Z",
  "updated_at" : "2012-09-04T20:53:40Z",
  "closed_at" : null,
  "body" : "Much like the annotation @Suite.SuiteClasses... it would be nice to have a @Suite.SuiteTests that would allow an individual test be added to the test suite.  This would mirror the JUnit 3 way of adding an individual test. "
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/109",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/109/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/109/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/109/events",
  "html_url" : "https://github.com/junit-team/junit/issues/109",
  "id" : 213793,
  "number" : 109,
  "title" : "Automatically Supplied Datapoints (for booleans and enum types)",
  "user" : {
    "login" : "MatrixFrog",
    "id" : 244381,
    "avatar_url" : "https://avatars.githubusercontent.com/u/244381?",
    "gravatar_id" : "e689265ee24e0874ae8a90827c4783e7",
    "url" : "https://api.github.com/users/MatrixFrog",
    "html_url" : "https://github.com/MatrixFrog",
    "followers_url" : "https://api.github.com/users/MatrixFrog/followers",
    "following_url" : "https://api.github.com/users/MatrixFrog/following{/other_user}",
    "gists_url" : "https://api.github.com/users/MatrixFrog/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/MatrixFrog/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/MatrixFrog/subscriptions",
    "organizations_url" : "https://api.github.com/users/MatrixFrog/orgs",
    "repos_url" : "https://api.github.com/users/MatrixFrog/repos",
    "events_url" : "https://api.github.com/users/MatrixFrog/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/MatrixFrog/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-06-03T21:58:27Z",
  "updated_at" : "2012-11-27T22:41:24Z",
  "closed_at" : null,
  "body" : "This is a feature that NUnit (the testing framework for .NET) has and JUnit appears not to have.\r\n\r\nhttp://nunit.org/index.php?p=datapoint&r=2.5.5\r\n\r\n\"Automatically Supplied Datapoints\r\n\r\nIt is normally not necessary to specify datapoints for boolean or enum arguments. Beginning with version 2.5.4, NUnit automatically supplies values of true and false for boolean arguments and will supply all defined values of any enumeration. \r\n\r\nIf for some reason you don't wish to use all possible values, you can override this behavior by supplying your own datapoints. If you supply any datapoints for an argument, automatic datapoint generation is suppressed.\""
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/110",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/110/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/110/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/110/events",
  "html_url" : "https://github.com/junit-team/junit/issues/110",
  "id" : 213802,
  "number" : 110,
  "title" : "Cannot annotate Collections with @Datapoints, only arrays",
  "user" : {
    "login" : "MatrixFrog",
    "id" : 244381,
    "avatar_url" : "https://avatars.githubusercontent.com/u/244381?",
    "gravatar_id" : "e689265ee24e0874ae8a90827c4783e7",
    "url" : "https://api.github.com/users/MatrixFrog",
    "html_url" : "https://github.com/MatrixFrog",
    "followers_url" : "https://api.github.com/users/MatrixFrog/followers",
    "following_url" : "https://api.github.com/users/MatrixFrog/following{/other_user}",
    "gists_url" : "https://api.github.com/users/MatrixFrog/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/MatrixFrog/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/MatrixFrog/subscriptions",
    "organizations_url" : "https://api.github.com/users/MatrixFrog/orgs",
    "repos_url" : "https://api.github.com/users/MatrixFrog/repos",
    "events_url" : "https://api.github.com/users/MatrixFrog/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/MatrixFrog/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2010-06-03T22:19:27Z",
  "updated_at" : "2013-03-07T18:27:08Z",
  "closed_at" : null,
  "body" : "Currently, the @Datapoints annotation can only be applied to arrays, not Lists or other Collections, as described in http://stackoverflow.com/questions/2967912/junit-theories-why-cant-i-use-lists-instead-of-arrays-as-datapoints\r\n\r\nIt would be nice if you could use Lists as well, as they are often easier to work with."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/111",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/111/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/111/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/111/events",
  "html_url" : "https://github.com/junit-team/junit/issues/111",
  "id" : 226256,
  "number" : 111,
  "title" : "JUnit 4.8.1 sources missing in Maven Central",
  "user" : {
    "login" : "maciej",
    "id" : 9706,
    "avatar_url" : "https://avatars.githubusercontent.com/u/9706?",
    "gravatar_id" : "d9cf7d9fe6ecfe317dce44b5cc5b710b",
    "url" : "https://api.github.com/users/maciej",
    "html_url" : "https://github.com/maciej",
    "followers_url" : "https://api.github.com/users/maciej/followers",
    "following_url" : "https://api.github.com/users/maciej/following{/other_user}",
    "gists_url" : "https://api.github.com/users/maciej/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/maciej/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/maciej/subscriptions",
    "organizations_url" : "https://api.github.com/users/maciej/orgs",
    "repos_url" : "https://api.github.com/users/maciej/repos",
    "events_url" : "https://api.github.com/users/maciej/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/maciej/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-06-19T10:04:36Z",
  "updated_at" : "2010-06-24T07:01:27Z",
  "closed_at" : "2010-06-24T07:01:27Z",
  "body" : "I'm not quite sure what the status of JUnit package in Maven Central repositories is exactly at the moment, nonetheless I'm posting the ticket (at least in hope for a reply and explanation of the status) regarding missing source package for JUnit 4.8.1 in Maven central.\n\nApparently it is available in JBoss' repo, anyway:\nhttp://jira.codehaus.org/browse/MAVENUPLOAD-2695"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/112",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/112/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/112/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/112/events",
  "html_url" : "https://github.com/junit-team/junit/issues/112",
  "id" : 229433,
  "number" : 112,
  "title" : "Report poass fial status based on calls to assertXXX(), fail(), etc.",
  "user" : {
    "login" : "K-her",
    "id" : 312783,
    "avatar_url" : "https://avatars.githubusercontent.com/u/312783?",
    "gravatar_id" : "a66ea204c4d4323966d56a30dc8a1948",
    "url" : "https://api.github.com/users/K-her",
    "html_url" : "https://github.com/K-her",
    "followers_url" : "https://api.github.com/users/K-her/followers",
    "following_url" : "https://api.github.com/users/K-her/following{/other_user}",
    "gists_url" : "https://api.github.com/users/K-her/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/K-her/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/K-her/subscriptions",
    "organizations_url" : "https://api.github.com/users/K-her/orgs",
    "repos_url" : "https://api.github.com/users/K-her/repos",
    "events_url" : "https://api.github.com/users/K-her/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/K-her/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-06-23T14:25:09Z",
  "updated_at" : "2012-08-15T19:02:58Z",
  "closed_at" : "2012-08-15T19:02:58Z",
  "body" : "When doing unit tests, sometimes I piggyback new functionlaity testing on old test methods (testFoo()) in the classes extending TestCase.  The thing is, I will report 100/100 passing tests before and after doing this so some in mangement (ya, shocking) might think that no work was done.  In addtion to the old way, I think it would be nice to have a counter for passing tests based on the number of calls to methods liek assertXXXX() and fail()."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/113",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/113/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/113/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/113/events",
  "html_url" : "https://github.com/junit-team/junit/issues/113",
  "id" : 234830,
  "number" : 113,
  "title" : "Button in Eclipse menu to launch junit plugin test",
  "user" : {
    "login" : "ivarodr",
    "id" : 318546,
    "avatar_url" : "https://avatars.githubusercontent.com/u/318546?",
    "gravatar_id" : "b1049f9ebee8161dbf58220fa98d71c3",
    "url" : "https://api.github.com/users/ivarodr",
    "html_url" : "https://github.com/ivarodr",
    "followers_url" : "https://api.github.com/users/ivarodr/followers",
    "following_url" : "https://api.github.com/users/ivarodr/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ivarodr/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ivarodr/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ivarodr/subscriptions",
    "organizations_url" : "https://api.github.com/users/ivarodr/orgs",
    "repos_url" : "https://api.github.com/users/ivarodr/repos",
    "events_url" : "https://api.github.com/users/ivarodr/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ivarodr/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-06-30T08:38:07Z",
  "updated_at" : "2010-06-30T12:49:56Z",
  "closed_at" : "2010-06-30T12:49:56Z",
  "body" : "Hi, i have a java package on my project that contains junit test and i want to export my project on jar files.\r\nMy questions is how to launch then the jUnit test, i can't find the way. \r\nThx."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/114",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/114/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/114/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/114/events",
  "html_url" : "https://github.com/junit-team/junit/issues/114",
  "id" : 239884,
  "number" : 114,
  "title" : "Relax synchronization in RunListener",
  "user" : {
    "login" : "krosenvold",
    "id" : 67744,
    "avatar_url" : "https://avatars.githubusercontent.com/u/67744?",
    "gravatar_id" : "48ad44fb319fc06a737a082820bff3ea",
    "url" : "https://api.github.com/users/krosenvold",
    "html_url" : "https://github.com/krosenvold",
    "followers_url" : "https://api.github.com/users/krosenvold/followers",
    "following_url" : "https://api.github.com/users/krosenvold/following{/other_user}",
    "gists_url" : "https://api.github.com/users/krosenvold/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/krosenvold/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/krosenvold/subscriptions",
    "organizations_url" : "https://api.github.com/users/krosenvold/orgs",
    "repos_url" : "https://api.github.com/users/krosenvold/repos",
    "events_url" : "https://api.github.com/users/krosenvold/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/krosenvold/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-07-06T08:00:35Z",
  "updated_at" : "2013-10-11T00:49:41Z",
  "closed_at" : "2013-10-11T00:49:41Z",
  "body" : "It turns out one of my earlier patches wrt thread-safety was a little bit too strict. When running a profiler, it blocks threads extensively. While this probably does not affect long running tests (integration tests and web tests), it severely limits the concurrency potential of non-blocking (unit)  tests. Since some reporters (like ant/maven surefire)  do IO themselves, singleton-blocking on these was not a good idea. \r\n\r\nThe patch changes underlying data structure and removes some synchronization, re-running with profiler reveals a much nicer picture.\r\n\r\nUsers of maven-surefire should also be aware that there is also superfluous blocking within surefire, some of which has been fixed in 2.6-SNAPSHOT.\r\n\r\nThe patch for this issue has been sent as a pull request, and can be found in krosenvold/junit."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/115",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/115/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/115/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/115/events",
  "html_url" : "https://github.com/junit-team/junit/issues/115",
  "id" : 240128,
  "number" : 115,
  "title" : "Allow Rules to modify After/Before Actions",
  "user" : {
    "login" : "RainerW",
    "id" : 118649,
    "avatar_url" : "https://avatars.githubusercontent.com/u/118649?",
    "gravatar_id" : "b3ae51ffe455df09a0418d84a8905f04",
    "url" : "https://api.github.com/users/RainerW",
    "html_url" : "https://github.com/RainerW",
    "followers_url" : "https://api.github.com/users/RainerW/followers",
    "following_url" : "https://api.github.com/users/RainerW/following{/other_user}",
    "gists_url" : "https://api.github.com/users/RainerW/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/RainerW/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/RainerW/subscriptions",
    "organizations_url" : "https://api.github.com/users/RainerW/orgs",
    "repos_url" : "https://api.github.com/users/RainerW/repos",
    "events_url" : "https://api.github.com/users/RainerW/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/RainerW/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 6,
  "created_at" : "2010-07-06T15:43:36Z",
  "updated_at" : "2014-05-11T22:18:58Z",
  "closed_at" : null,
  "body" : "I need a way to intercept a failing Test method BEFORE any After Method was called.\r\n\r\nThe rule i'm working on should create a screenshot of the app in case a Test failed. This is not possible, because my rule get's a RunAfters Instance passed in, on which I call base.evaluate(). But the RunAfters instance allready handles the @After part. So when my rule gets control again, all after methodes are allready executed. And therefore the applications is allready down, making now a screenshot is useless.\r\n\r\nSo I need a Way to modify the After Statements passed in.\r\n\r\na) Im my case it would be enough to create my own RunAfters. Therefore RunAfters should have a getter for it's private fields. So I can delegate the afters after i created the screenshot.\r\n\r\nb) But, the nicer solution would be, to allow to modify the after & before list. I can imagine a Rule which does execute some of the @Before or @Afters only if some conditions are met. Or Injects it's own Before/Afters on the fly."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/116",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/116/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/116/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/116/events",
  "html_url" : "https://github.com/junit-team/junit/issues/116",
  "id" : 240146,
  "number" : 116,
  "title" : "@Rule allow to ignore Tests",
  "user" : {
    "login" : "RainerW",
    "id" : 118649,
    "avatar_url" : "https://avatars.githubusercontent.com/u/118649?",
    "gravatar_id" : "b3ae51ffe455df09a0418d84a8905f04",
    "url" : "https://api.github.com/users/RainerW",
    "html_url" : "https://github.com/RainerW",
    "followers_url" : "https://api.github.com/users/RainerW/followers",
    "following_url" : "https://api.github.com/users/RainerW/following{/other_user}",
    "gists_url" : "https://api.github.com/users/RainerW/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/RainerW/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/RainerW/subscriptions",
    "organizations_url" : "https://api.github.com/users/RainerW/orgs",
    "repos_url" : "https://api.github.com/users/RainerW/repos",
    "events_url" : "https://api.github.com/users/RainerW/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/RainerW/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 23,
  "created_at" : "2010-07-06T15:53:46Z",
  "updated_at" : "2013-11-16T02:55:28Z",
  "closed_at" : null,
  "body" : "Is there a way to create the same behaviour then @Ignore with a rule?\r\n\r\nThis would allow me to create a custom annoationen and rule where you can mark tests which cannot be executed in a given Environment. "
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/117",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/117/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/117/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/117/events",
  "html_url" : "https://github.com/junit-team/junit/issues/117",
  "id" : 240611,
  "number" : 117,
  "title" : "Make org.junit.runner.Description's constructor protected so that it can be subclassed",
  "user" : {
    "login" : "pniederw",
    "id" : 45382,
    "avatar_url" : "https://avatars.githubusercontent.com/u/45382?",
    "gravatar_id" : "8d9261be2c7926796bf37c7155133aec",
    "url" : "https://api.github.com/users/pniederw",
    "html_url" : "https://github.com/pniederw",
    "followers_url" : "https://api.github.com/users/pniederw/followers",
    "following_url" : "https://api.github.com/users/pniederw/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pniederw/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pniederw/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pniederw/subscriptions",
    "organizations_url" : "https://api.github.com/users/pniederw/orgs",
    "repos_url" : "https://api.github.com/users/pniederw/repos",
    "events_url" : "https://api.github.com/users/pniederw/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pniederw/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/descriptions",
    "name" : "descriptions",
    "color" : "009800"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 8,
  "created_at" : "2010-07-06T23:49:09Z",
  "updated_at" : "2014-01-29T05:31:20Z",
  "closed_at" : null,
  "body" : "My org.junit.runner.Runner dynamically generates new tests at runtime. In order to make them behave nicely in IDEs, I'd like to override org.junit.runner.Description.getMethodName(). However, I can't subclass Description because its only constructor is private."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/118",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/118/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/118/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/118/events",
  "html_url" : "https://github.com/junit-team/junit/issues/118",
  "id" : 242194,
  "number" : 118,
  "title" : "Git server does not permit archive creation",
  "user" : {
    "login" : "fnasser",
    "id" : 326533,
    "avatar_url" : "https://avatars.githubusercontent.com/u/326533?",
    "gravatar_id" : "e52ad4f57ee51a6d3e47733d8a809a91",
    "url" : "https://api.github.com/users/fnasser",
    "html_url" : "https://github.com/fnasser",
    "followers_url" : "https://api.github.com/users/fnasser/followers",
    "following_url" : "https://api.github.com/users/fnasser/following{/other_user}",
    "gists_url" : "https://api.github.com/users/fnasser/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/fnasser/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/fnasser/subscriptions",
    "organizations_url" : "https://api.github.com/users/fnasser/orgs",
    "repos_url" : "https://api.github.com/users/fnasser/repos",
    "events_url" : "https://api.github.com/users/fnasser/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/fnasser/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-07-08T15:36:18Z",
  "updated_at" : "2013-11-13T03:23:14Z",
  "closed_at" : "2013-11-13T03:23:14Z",
  "body" : "git archive --remote=git://foo   relies on the git server being configured to permit archive creation\r\n\r\nCan you do that please?  Otherwise it gets a bit convoluted t create a simple source tar ball for building RPMs for things like Fedora and other distributions.\r\n\r\nP.S.: I tried getting the .zip but it does not have the juinit/runner directory, so the build fails as build.xml refers to the Version.java.template that should be there.  I am opening another case for that. "
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/119",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/119/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/119/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/119/events",
  "html_url" : "https://github.com/junit-team/junit/issues/119",
  "id" : 242198,
  "number" : 119,
  "title" : "junit/runner contents missing from the 4.8.1 and 4.8.2 .zip source files",
  "user" : {
    "login" : "fnasser",
    "id" : 326533,
    "avatar_url" : "https://avatars.githubusercontent.com/u/326533?",
    "gravatar_id" : "e52ad4f57ee51a6d3e47733d8a809a91",
    "url" : "https://api.github.com/users/fnasser",
    "html_url" : "https://github.com/fnasser",
    "followers_url" : "https://api.github.com/users/fnasser/followers",
    "following_url" : "https://api.github.com/users/fnasser/following{/other_user}",
    "gists_url" : "https://api.github.com/users/fnasser/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/fnasser/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/fnasser/subscriptions",
    "organizations_url" : "https://api.github.com/users/fnasser/orgs",
    "repos_url" : "https://api.github.com/users/fnasser/repos",
    "events_url" : "https://api.github.com/users/fnasser/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/fnasser/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/regression",
    "name" : "regression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-07-08T15:37:02Z",
  "updated_at" : "2011-04-15T21:30:25Z",
  "closed_at" : "2011-04-15T21:30:25Z",
  "body" : "I tried getting the .zip but it does not have the juinit/runner directory, so the build fails as build.xml refers to the Version.java.template that should be there."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/120",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/120/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/120/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/120/events",
  "html_url" : "https://github.com/junit-team/junit/issues/120",
  "id" : 245897,
  "number" : 120,
  "title" : "Assumptions don't work in tests with expected exceptions",
  "user" : {
    "login" : "petur",
    "id" : 330577,
    "avatar_url" : "https://avatars.githubusercontent.com/u/330577?",
    "gravatar_id" : "4f12baafd71e7495a909c08c16199acb",
    "url" : "https://api.github.com/users/petur",
    "html_url" : "https://github.com/petur",
    "followers_url" : "https://api.github.com/users/petur/followers",
    "following_url" : "https://api.github.com/users/petur/following{/other_user}",
    "gists_url" : "https://api.github.com/users/petur/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/petur/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/petur/subscriptions",
    "organizations_url" : "https://api.github.com/users/petur/orgs",
    "repos_url" : "https://api.github.com/users/petur/repos",
    "events_url" : "https://api.github.com/users/petur/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/petur/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-07-13T09:08:10Z",
  "updated_at" : "2010-07-13T09:23:05Z",
  "closed_at" : "2010-07-13T09:23:05Z",
  "body" : "The following test should be ignored, but fails with JUnit 4.8.2:\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testExpectedVsAssumption() {\n        Assume.assumeTrue(false);\n    }\n\nThis test succeeds if run with @RunWith(JUnit4ClassRunner.class). The reason it works with the older runner, but fails with the new runner seems to be that org.junit.internal.runners.MethodRoadie.runTestMethod() has special handling for AssumptionViolatedException, but this handling is missing from org.junit.internal.runners.statements.ExpectException.evaluate()."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/121",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/121/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/121/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/121/events",
  "html_url" : "https://github.com/junit-team/junit/issues/121",
  "id" : 245911,
  "number" : 121,
  "title" : "Assumptions don't work in tests with expected exceptions",
  "user" : {
    "login" : "petur",
    "id" : 330577,
    "avatar_url" : "https://avatars.githubusercontent.com/u/330577?",
    "gravatar_id" : "4f12baafd71e7495a909c08c16199acb",
    "url" : "https://api.github.com/users/petur",
    "html_url" : "https://github.com/petur",
    "followers_url" : "https://api.github.com/users/petur/followers",
    "following_url" : "https://api.github.com/users/petur/following{/other_user}",
    "gists_url" : "https://api.github.com/users/petur/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/petur/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/petur/subscriptions",
    "organizations_url" : "https://api.github.com/users/petur/orgs",
    "repos_url" : "https://api.github.com/users/petur/repos",
    "events_url" : "https://api.github.com/users/petur/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/petur/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2010-07-13T09:28:50Z",
  "updated_at" : "2013-08-01T07:00:56Z",
  "closed_at" : "2012-04-09T17:14:36Z",
  "body" : "The following test should be ignored, but fails with JUnit 4.8.2:\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testExpectedVsAssumption() {\n        Assume.assumeTrue(false);\n    }\n\nThis test succeeds if run with @RunWith(JUnit4ClassRunner.class). The reason it works with the older runner, but fails with the new runner seems to be that org.junit.internal.runners.MethodRoadie.runTestMethod() has special handling for AssumptionViolatedException, but this handling is missing from org.junit.internal.runners.statements.ExpectException.evaluate()."
} ]