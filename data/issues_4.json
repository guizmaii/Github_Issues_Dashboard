[ {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/122",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/122/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/122/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/122/events",
  "html_url" : "https://github.com/junit-team/junit/issues/122",
  "id" : 248565,
  "number" : 122,
  "title" : "@BeforeClass requiring the method to be static is nonsense",
  "user" : {
    "login" : "subes",
    "id" : 332937,
    "avatar_url" : "https://avatars.githubusercontent.com/u/332937?",
    "gravatar_id" : "2f79f53c422266af6e344e7aa6da902c",
    "url" : "https://api.github.com/users/subes",
    "html_url" : "https://github.com/subes",
    "followers_url" : "https://api.github.com/users/subes/followers",
    "following_url" : "https://api.github.com/users/subes/following{/other_user}",
    "gists_url" : "https://api.github.com/users/subes/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/subes/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/subes/subscriptions",
    "organizations_url" : "https://api.github.com/users/subes/orgs",
    "repos_url" : "https://api.github.com/users/subes/repos",
    "events_url" : "https://api.github.com/users/subes/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/subes/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/needs-more-info",
    "name" : "needs-more-info",
    "color" : "4ae6c7"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 11,
  "created_at" : "2010-07-15T12:20:32Z",
  "updated_at" : "2014-01-29T05:51:42Z",
  "closed_at" : null,
  "body" : "Hi,\r\n\r\nJUnit is the only testing Framework which requires @BeforeClass Annotated methods to be static. This makes @BeforeClass mostly useless f√ºr Enterprise Applications, because often you have to do a setUpOnce after the dependency injection has been done (e.g. Spring or some other Framework). \r\n\r\nAs a workaround @Before with a boolean field and an initialized check is often used which is against the design of JUnits @Before, but is required because @BeforeClass is mutilated by design... \r\n\r\nAlso see:\r\nhttp://stackoverflow.com/questions/1052577/why-must-junits-fixturesetup-be-static\r\n\r\nBest Regards\r\nsubes"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/123",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/123/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/123/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/123/events",
  "html_url" : "https://github.com/junit-team/junit/issues/123",
  "id" : 252063,
  "number" : 123,
  "title" : "In/ExcludeCategories should support inheritance",
  "user" : {
    "login" : "schauder",
    "id" : 136683,
    "avatar_url" : "https://avatars.githubusercontent.com/u/136683?",
    "gravatar_id" : "7de1bd2ce2d7b597f0e7f54de638e59c",
    "url" : "https://api.github.com/users/schauder",
    "html_url" : "https://github.com/schauder",
    "followers_url" : "https://api.github.com/users/schauder/followers",
    "following_url" : "https://api.github.com/users/schauder/following{/other_user}",
    "gists_url" : "https://api.github.com/users/schauder/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/schauder/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/schauder/subscriptions",
    "organizations_url" : "https://api.github.com/users/schauder/orgs",
    "repos_url" : "https://api.github.com/users/schauder/repos",
    "events_url" : "https://api.github.com/users/schauder/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/schauder/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-07-18T20:53:29Z",
  "updated_at" : "2012-09-06T14:36:02Z",
  "closed_at" : null,
  "body" : "I think it would be a nice feature if one could define the classes making up a test Suite in a superclass and then use IncludeCategories and ExcludeCategories in subclasses, to limit the tests to run. \r\n\r\nWithout this one is forced to specify the classes making up a test suite over over again."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/124",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/124/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/124/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/124/events",
  "html_url" : "https://github.com/junit-team/junit/issues/124",
  "id" : 259783,
  "number" : 124,
  "title" : "Instructions for running JUnit unit tests from Maven",
  "user" : {
    "login" : "ralfebert",
    "id" : 26635,
    "avatar_url" : "https://avatars.githubusercontent.com/u/26635?",
    "gravatar_id" : "fa8771dec9da9299afed9ffce70c2c18",
    "url" : "https://api.github.com/users/ralfebert",
    "html_url" : "https://github.com/ralfebert",
    "followers_url" : "https://api.github.com/users/ralfebert/followers",
    "following_url" : "https://api.github.com/users/ralfebert/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ralfebert/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ralfebert/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ralfebert/subscriptions",
    "organizations_url" : "https://api.github.com/users/ralfebert/orgs",
    "repos_url" : "https://api.github.com/users/ralfebert/repos",
    "events_url" : "https://api.github.com/users/ralfebert/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ralfebert/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2010-07-26T14:12:29Z",
  "updated_at" : "2013-11-13T00:24:55Z",
  "closed_at" : "2013-11-13T00:24:55Z",
  "body" : "The github/junit/README.html and the junit.org page should provide instructions how to properly configure the project and run the junit unit test suite.\n\nJust doing 'mvn test' for HEAD failed:\nTests run: 223, Failures: 27, Errors: 1, Skipped: 0\n\nf.e. because of NPEs in org.junit.samples.money.MoneyTest\n\nAre these failures really or a configuration problem?\n\nRunning the whole 'src/test/java' package in Eclipse also fails, the project also has many 'AllTests' suites."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/125",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/125/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/125/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/125/events",
  "html_url" : "https://github.com/junit-team/junit/issues/125",
  "id" : 261986,
  "number" : 125,
  "title" : "No error/warning on non static method annotated with @DataPoint",
  "user" : {
    "login" : "jschneider",
    "id" : 45393,
    "avatar_url" : "https://avatars.githubusercontent.com/u/45393?",
    "gravatar_id" : "a6b917f9418fb9bf015a0274375078f2",
    "url" : "https://api.github.com/users/jschneider",
    "html_url" : "https://github.com/jschneider",
    "followers_url" : "https://api.github.com/users/jschneider/followers",
    "following_url" : "https://api.github.com/users/jschneider/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jschneider/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jschneider/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jschneider/subscriptions",
    "organizations_url" : "https://api.github.com/users/jschneider/orgs",
    "repos_url" : "https://api.github.com/users/jschneider/repos",
    "events_url" : "https://api.github.com/users/jschneider/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jschneider/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/theories",
    "name" : "theories",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2010-07-28T14:16:16Z",
  "updated_at" : "2013-01-29T06:45:33Z",
  "closed_at" : "2013-01-29T06:45:33Z",
  "body" : "This test is marked as successfull but did *not* run:\n\n     @RunWith( Theories.class )\n     public class TheoriesTest {\n      @Theory\n      public void aTheory( String arg ) {\n        System.out.println( \"TheoriesTest.aTheory(\" + arg + \")\" );\n        assertNotNull( arg );\n      }\n\n      @DataPoint\n      public String getParam() {\n        return \"daParam\";\n      }\n     }\n\n\nI think the problem lies in Theories:126.\nstatement.evaluate() catches exceptions silently\n(org.junit.experimental.theories.Theories.TheoryAnchor#methodCompletesWithParameters:158).\n\nTherefore \"handleDataPointSuccess\" is called even when an exception has\nbeen thrown....\n\n\n\nSo I think there are at least two things missing:\n- Proper exception handling...\n- Checking the DataPoint(s) methods for the static keyword\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/126",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/126/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/126/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/126/events",
  "html_url" : "https://github.com/junit-team/junit/issues/126",
  "id" : 261989,
  "number" : 126,
  "title" : "Please allow Iterable as type for @DataPoints",
  "user" : {
    "login" : "jschneider",
    "id" : 45393,
    "avatar_url" : "https://avatars.githubusercontent.com/u/45393?",
    "gravatar_id" : "a6b917f9418fb9bf015a0274375078f2",
    "url" : "https://api.github.com/users/jschneider",
    "html_url" : "https://github.com/jschneider",
    "followers_url" : "https://api.github.com/users/jschneider/followers",
    "following_url" : "https://api.github.com/users/jschneider/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jschneider/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jschneider/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jschneider/subscriptions",
    "organizations_url" : "https://api.github.com/users/jschneider/orgs",
    "repos_url" : "https://api.github.com/users/jschneider/repos",
    "events_url" : "https://api.github.com/users/jschneider/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jschneider/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/theories",
    "name" : "theories",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : {
    "url" : "https://api.github.com/repos/junit-team/junit/milestones/2",
    "labels_url" : "https://api.github.com/repos/junit-team/junit/milestones/2/labels",
    "id" : 202012,
    "number" : 2,
    "title" : "4.12",
    "description" : null,
    "creator" : {
      "login" : "marcphilipp",
      "id" : 214207,
      "avatar_url" : "https://avatars.githubusercontent.com/u/214207?",
      "gravatar_id" : "956c7d246841e8507a1e1b96842994db",
      "url" : "https://api.github.com/users/marcphilipp",
      "html_url" : "https://github.com/marcphilipp",
      "followers_url" : "https://api.github.com/users/marcphilipp/followers",
      "following_url" : "https://api.github.com/users/marcphilipp/following{/other_user}",
      "gists_url" : "https://api.github.com/users/marcphilipp/gists{/gist_id}",
      "starred_url" : "https://api.github.com/users/marcphilipp/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/marcphilipp/subscriptions",
      "organizations_url" : "https://api.github.com/users/marcphilipp/orgs",
      "repos_url" : "https://api.github.com/users/marcphilipp/repos",
      "events_url" : "https://api.github.com/users/marcphilipp/events{/privacy}",
      "received_events_url" : "https://api.github.com/users/marcphilipp/received_events",
      "type" : "User",
      "site_admin" : false
    },
    "open_issues" : 4,
    "closed_issues" : 42,
    "state" : "open",
    "created_at" : "2012-10-26T09:58:06Z",
    "updated_at" : "2014-05-15T07:23:02Z",
    "due_on" : null
  },
  "comments" : 8,
  "created_at" : "2010-07-28T14:19:40Z",
  "updated_at" : "2014-03-29T23:22:06Z",
  "closed_at" : "2013-09-05T19:11:58Z",
  "body" : "Often it is easier to just return a Collection that contains the data points. Therefore I think it will be helpful to allow additional return types for those methods.\r\n\r\nI suggest Iterable, but at least Collection should be allowed."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/127",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/127/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/127/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/127/events",
  "html_url" : "https://github.com/junit-team/junit/issues/127",
  "id" : 261996,
  "number" : 127,
  "title" : "Wish: Non-static DataPoint(s)",
  "user" : {
    "login" : "jschneider",
    "id" : 45393,
    "avatar_url" : "https://avatars.githubusercontent.com/u/45393?",
    "gravatar_id" : "a6b917f9418fb9bf015a0274375078f2",
    "url" : "https://api.github.com/users/jschneider",
    "html_url" : "https://github.com/jschneider",
    "followers_url" : "https://api.github.com/users/jschneider/followers",
    "following_url" : "https://api.github.com/users/jschneider/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jschneider/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jschneider/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jschneider/subscriptions",
    "organizations_url" : "https://api.github.com/users/jschneider/orgs",
    "repos_url" : "https://api.github.com/users/jschneider/repos",
    "events_url" : "https://api.github.com/users/jschneider/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jschneider/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-07-28T14:24:44Z",
  "updated_at" : "2012-09-27T20:33:46Z",
  "closed_at" : null,
  "body" : "I think this has been discussed before. Never the less I dare to ask for it:\r\nI would like to see non static DataPoint(s) methods (and fields?).\r\n\r\nWhile I see the reason why this limitation has been added, there is at least one use case, where non-static methods are useful:\r\nI have created an abstract base class to help writing common tests (for serialization). Now I have to implement at least one test class for a bunch of classes to test. And for each of those tests I have to create a DataPoints method.\r\nNow it would be very, very helpful if I was able to define an abstract method annotated with DataPoints. Especially because the abstract base class is generified. This saved me a whole lot of strokes...\r\n\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/128",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/128/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/128/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/128/events",
  "html_url" : "https://github.com/junit-team/junit/issues/128",
  "id" : 265978,
  "number" : 128,
  "title" : "Dynamic Test Suites",
  "user" : {
    "login" : "yschimke",
    "id" : 231923,
    "avatar_url" : "https://avatars.githubusercontent.com/u/231923?",
    "gravatar_id" : "fb858eb04326b76c7c4c7c851dbfbafb",
    "url" : "https://api.github.com/users/yschimke",
    "html_url" : "https://github.com/yschimke",
    "followers_url" : "https://api.github.com/users/yschimke/followers",
    "following_url" : "https://api.github.com/users/yschimke/following{/other_user}",
    "gists_url" : "https://api.github.com/users/yschimke/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/yschimke/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/yschimke/subscriptions",
    "organizations_url" : "https://api.github.com/users/yschimke/orgs",
    "repos_url" : "https://api.github.com/users/yschimke/repos",
    "events_url" : "https://api.github.com/users/yschimke/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/yschimke/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 6,
  "created_at" : "2010-08-01T21:23:51Z",
  "updated_at" : "2012-10-24T19:37:16Z",
  "closed_at" : "2012-10-24T19:28:22Z",
  "body" : "Using concordion, it would be very useful if Junit allowed test suites to be built dynamically. i.e. create a new test for each html specification in a directory.  There are many other similar cases, that currently require adding a new test method or class.\r\n\r\n Previously with junit 3, you could do this but 4 removed the functionality.  This would be fine except you lose other functionality if you stick with the more powerful junit 4 features.\r\n\r\nWhat I would propose is the following interface and annotation.  In the case below concordion could define a suitebuilder that means a single junit test class can have multiple specification run.\r\n\r\npublic interface SuiteBuilder {\r\n\tList<FrameworkMethod> buildSuite(TestClass testClass);\r\n}\r\n\r\n@RunWith(JunitSuiteRunner.class)\r\npublic class ConcordionTests {\r\n\t@Suite\r\n\tpublic static ConcordionSuite suite = new ConcordionSuite(new File(\"src/test/resources/concordion\"), new File(\"target/concordion\"));\r\n\t\r\n\t@Test\r\n\tpublic void normalTest() {\r\n\t\tSystem.out.println(\"test method\");\r\n\t}\r\n\t\r\n\tpublic String getGreeting() {\r\n\t\treturn \"Hello World!\";\r\n\t}\r\n}"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/129",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/129/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/129/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/129/events",
  "html_url" : "https://github.com/junit-team/junit/issues/129",
  "id" : 266361,
  "number" : 129,
  "title" : "Deprecation of features because of Rule seems incomplete",
  "user" : {
    "login" : "yschimke",
    "id" : 231923,
    "avatar_url" : "https://avatars.githubusercontent.com/u/231923?",
    "gravatar_id" : "fb858eb04326b76c7c4c7c851dbfbafb",
    "url" : "https://api.github.com/users/yschimke",
    "html_url" : "https://github.com/yschimke",
    "followers_url" : "https://api.github.com/users/yschimke/followers",
    "following_url" : "https://api.github.com/users/yschimke/following{/other_user}",
    "gists_url" : "https://api.github.com/users/yschimke/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/yschimke/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/yschimke/subscriptions",
    "organizations_url" : "https://api.github.com/users/yschimke/orgs",
    "repos_url" : "https://api.github.com/users/yschimke/repos",
    "events_url" : "https://api.github.com/users/yschimke/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/yschimke/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : {
    "url" : "https://api.github.com/repos/junit-team/junit/milestones/3",
    "labels_url" : "https://api.github.com/repos/junit-team/junit/milestones/3/labels",
    "id" : 546227,
    "number" : 3,
    "title" : "4.13",
    "description" : "",
    "creator" : {
      "login" : "kcooney",
      "id" : 478190,
      "avatar_url" : "https://avatars.githubusercontent.com/u/478190?",
      "gravatar_id" : "3e1323e035210af33f94c2d19192c936",
      "url" : "https://api.github.com/users/kcooney",
      "html_url" : "https://github.com/kcooney",
      "followers_url" : "https://api.github.com/users/kcooney/followers",
      "following_url" : "https://api.github.com/users/kcooney/following{/other_user}",
      "gists_url" : "https://api.github.com/users/kcooney/gists{/gist_id}",
      "starred_url" : "https://api.github.com/users/kcooney/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/kcooney/subscriptions",
      "organizations_url" : "https://api.github.com/users/kcooney/orgs",
      "repos_url" : "https://api.github.com/users/kcooney/repos",
      "events_url" : "https://api.github.com/users/kcooney/events{/privacy}",
      "received_events_url" : "https://api.github.com/users/kcooney/received_events",
      "type" : "User",
      "site_admin" : false
    },
    "open_issues" : 1,
    "closed_issues" : 1,
    "state" : "open",
    "created_at" : "2014-01-24T07:41:04Z",
    "updated_at" : "2014-04-17T06:22:54Z",
    "due_on" : null
  },
  "comments" : 4,
  "created_at" : "2010-08-02T09:22:21Z",
  "updated_at" : "2014-04-17T06:22:54Z",
  "closed_at" : null,
  "body" : "MethodRule only gets invoked for the test method, however for a change where you would otherwise extend BlockJUnit4ClassRunner and override withBefores, you can't achieve the same with a Rule.\r\n\r\nMethodRule should have a sub-interface e.g. LifeCycleAwareRule that allows a rule to change the test instance before the @Before block is run.\r\n\r\nOne example is unitils @SpringBeanByType, these must be injected before the @Before block runs, but with Rule this is not possible"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/130",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/130/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/130/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/130/events",
  "html_url" : "https://github.com/junit-team/junit/issues/130",
  "id" : 267811,
  "number" : 130,
  "title" : "Bug: jUnit-generated test classes don't return the same results every time",
  "user" : {
    "login" : "miaoling",
    "id" : 352978,
    "avatar_url" : "https://avatars.githubusercontent.com/u/352978?",
    "gravatar_id" : "8fb268fa32e8bb7414068fd1e4e82b75",
    "url" : "https://api.github.com/users/miaoling",
    "html_url" : "https://github.com/miaoling",
    "followers_url" : "https://api.github.com/users/miaoling/followers",
    "following_url" : "https://api.github.com/users/miaoling/following{/other_user}",
    "gists_url" : "https://api.github.com/users/miaoling/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/miaoling/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/miaoling/subscriptions",
    "organizations_url" : "https://api.github.com/users/miaoling/orgs",
    "repos_url" : "https://api.github.com/users/miaoling/repos",
    "events_url" : "https://api.github.com/users/miaoling/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/miaoling/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-08-03T16:25:54Z",
  "updated_at" : "2010-08-05T13:51:34Z",
  "closed_at" : "2010-08-05T13:51:34Z",
  "body" : "We've just started deploying jUnit to test a class of utility methods we use in the rest of our program (methods that parse data files, change the date, etc). There are about 150 methods in the class we're testing. We generated a test class for that class with jUnit, put in expected result and \"real\" result values for the first 70 of the methods, commented the rest out, and ran the test class. Now the issue is, every other time we run the test class, a different number of tests passed, even though we didn't make any change to the code between two runs. If we run the test class 5 times in a row, sometimes 32 tests would pass (out of 70), sometimes 33, sometimes 29...you get the idea."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/131",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/131/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/131/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/131/events",
  "html_url" : "https://github.com/junit-team/junit/issues/131",
  "id" : 270698,
  "number" : 131,
  "title" : "Please update Maven repo to 4.8.2",
  "user" : {
    "login" : "michel-slm",
    "id" : 85603,
    "avatar_url" : "https://avatars.githubusercontent.com/u/85603?",
    "gravatar_id" : "3ac78be5e356078c3d5a126840934538",
    "url" : "https://api.github.com/users/michel-slm",
    "html_url" : "https://github.com/michel-slm",
    "followers_url" : "https://api.github.com/users/michel-slm/followers",
    "following_url" : "https://api.github.com/users/michel-slm/following{/other_user}",
    "gists_url" : "https://api.github.com/users/michel-slm/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/michel-slm/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/michel-slm/subscriptions",
    "organizations_url" : "https://api.github.com/users/michel-slm/orgs",
    "repos_url" : "https://api.github.com/users/michel-slm/repos",
    "events_url" : "https://api.github.com/users/michel-slm/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/michel-slm/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/needs-more-info",
    "name" : "needs-more-info",
    "color" : "4ae6c7"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/regression",
    "name" : "regression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-08-06T16:07:50Z",
  "updated_at" : "2011-04-15T17:33:52Z",
  "closed_at" : "2011-04-15T17:33:52Z",
  "body" : "The latest version available through Maven is still 4.8.1, though 4.8.2 has been out for quite a while."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/132",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/132/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/132/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/132/events",
  "html_url" : "https://github.com/junit-team/junit/issues/132",
  "id" : 271615,
  "number" : 132,
  "title" : "@Test (expected=SomeException.class) does not work in combination with assume",
  "user" : {
    "login" : "huxi",
    "id" : 119647,
    "avatar_url" : "https://avatars.githubusercontent.com/u/119647?",
    "gravatar_id" : "1e8533fe855afb775463f140b47aa544",
    "url" : "https://api.github.com/users/huxi",
    "html_url" : "https://github.com/huxi",
    "followers_url" : "https://api.github.com/users/huxi/followers",
    "following_url" : "https://api.github.com/users/huxi/following{/other_user}",
    "gists_url" : "https://api.github.com/users/huxi/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/huxi/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/huxi/subscriptions",
    "organizations_url" : "https://api.github.com/users/huxi/orgs",
    "repos_url" : "https://api.github.com/users/huxi/repos",
    "events_url" : "https://api.github.com/users/huxi/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/huxi/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-08-07T20:38:00Z",
  "updated_at" : "2010-08-07T23:01:11Z",
  "closed_at" : "2010-08-07T23:01:11Z",
  "body" : "<pre>\n@Test(expected=IOException.class)\npublic void foo() {\n    assumeTrue(false);\n}\n</pre>\n\nfails with the following message:\n<pre>\njava.lang.Exception: Unexpected exception, expected<java.io.IOException> but was<org.junit.internal.AssumptionViolatedException>\n    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:43)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.junit.runners.Suite.runChild(Suite.java:128)\n    at org.junit.runners.Suite.runChild(Suite.java:24)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:64)\nCaused by: org.junit.internal.AssumptionViolatedException: got: <false>, expected: is <true>\n    at org.junit.Assume.assumeThat(Assume.java:70)\n    at org.junit.Assume.assumeTrue(Assume.java:39)\n</pre>\n\nInstead, the test should simply be skipped."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/133",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/133/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/133/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/133/events",
  "html_url" : "https://github.com/junit-team/junit/issues/133",
  "id" : 271823,
  "number" : 133,
  "title" : "A test with a failing assume is not counted as skipped but as run",
  "user" : {
    "login" : "huxi",
    "id" : 119647,
    "avatar_url" : "https://avatars.githubusercontent.com/u/119647?",
    "gravatar_id" : "1e8533fe855afb775463f140b47aa544",
    "url" : "https://api.github.com/users/huxi",
    "html_url" : "https://github.com/huxi",
    "followers_url" : "https://api.github.com/users/huxi/followers",
    "following_url" : "https://api.github.com/users/huxi/following{/other_user}",
    "gists_url" : "https://api.github.com/users/huxi/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/huxi/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/huxi/subscriptions",
    "organizations_url" : "https://api.github.com/users/huxi/orgs",
    "repos_url" : "https://api.github.com/users/huxi/repos",
    "events_url" : "https://api.github.com/users/huxi/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/huxi/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-08-07T21:07:30Z",
  "updated_at" : "2010-08-07T23:03:48Z",
  "closed_at" : "2010-08-07T23:03:48Z",
  "body" : "<pre>\r\n@Test\r\npublic void foo()\r\n{\r\n    assumeTrue(false);\r\n}\r\n</pre>\r\nis not counted as skipped but as run instead.\r\n\r\nThis is the case using Maven 2 but I assume that it's a general issue."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/134",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/134/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/134/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/134/events",
  "html_url" : "https://github.com/junit-team/junit/issues/134",
  "id" : 273841,
  "number" : 134,
  "title" : "API docs: Depricated method of Assert refers to non-existing signature",
  "user" : {
    "login" : "electrickery",
    "id" : 359491,
    "avatar_url" : "https://avatars.githubusercontent.com/u/359491?",
    "gravatar_id" : "be8cede0edd6be4a1bf299c4b9deb489",
    "url" : "https://api.github.com/users/electrickery",
    "html_url" : "https://github.com/electrickery",
    "followers_url" : "https://api.github.com/users/electrickery/followers",
    "following_url" : "https://api.github.com/users/electrickery/following{/other_user}",
    "gists_url" : "https://api.github.com/users/electrickery/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/electrickery/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/electrickery/subscriptions",
    "organizations_url" : "https://api.github.com/users/electrickery/orgs",
    "repos_url" : "https://api.github.com/users/electrickery/repos",
    "events_url" : "https://api.github.com/users/electrickery/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/electrickery/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-08-10T07:57:55Z",
  "updated_at" : "2011-08-11T17:40:42Z",
  "closed_at" : "2011-08-11T17:40:42Z",
  "body" : "In the API docs (http://junit.org/apidocs/) of org.junit.Assert in the Method Summary is referred to another method with signature \"assertEquals(double expected, double actual, double epsilon)\". \r\nThere is no such method, but there is a \"assertEquals(double expected, double actual, double delta)\". \r\n\r\nSame for the methods including a \"String message\"."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/135",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/135/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/135/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/135/events",
  "html_url" : "https://github.com/junit-team/junit/issues/135",
  "id" : 273922,
  "number" : 135,
  "title" : "Provide description patterns for Parameterized tests",
  "user" : {
    "login" : "ddimtirov",
    "id" : 359618,
    "avatar_url" : "https://avatars.githubusercontent.com/u/359618?",
    "gravatar_id" : "35565f5e3f3f47e6e65fa445e77e40fc",
    "url" : "https://api.github.com/users/ddimtirov",
    "html_url" : "https://github.com/ddimtirov",
    "followers_url" : "https://api.github.com/users/ddimtirov/followers",
    "following_url" : "https://api.github.com/users/ddimtirov/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ddimtirov/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ddimtirov/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ddimtirov/subscriptions",
    "organizations_url" : "https://api.github.com/users/ddimtirov/orgs",
    "repos_url" : "https://api.github.com/users/ddimtirov/repos",
    "events_url" : "https://api.github.com/users/ddimtirov/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ddimtirov/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/parameterized",
    "name" : "parameterized",
    "color" : "0052cc"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-08-10T10:20:46Z",
  "updated_at" : "2014-02-12T15:36:09Z",
  "closed_at" : "2014-02-12T15:36:09Z",
  "body" : "Usually when using parameterized tests, the reports display [0], [1], [2] for each run of the fixture and methodName[0], methodName[1], etc. for the actual tests. This creates the situation where you need to lookup the actual parameters in the sources to see what is the actual failure. A better approach would be if we could customize display names to contain more information about the scenario we are running. \n\nHere (http://github.com/ddimtirov/junit/commit/b99a3) is a forked version with patched Parameterized runner that achieves this and a basic test for the functionality. I've also added a basic test for illustration.\n\nThe new feature works by allowing one to specify `fixtureDescription` and `testDescription` patterns to the Parameters annotation. This has the benefit that the formatting is kept close to the data and the default values are chosen to be backwards compatible, so there is no impact to the users that choose not to specify the patterns. See Javadoc for details.\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/136",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/136/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/136/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/136/events",
  "html_url" : "https://github.com/junit-team/junit/issues/136",
  "id" : 276353,
  "number" : 136,
  "title" : "generic type conflics in Hamcrest matchers (hasItem/instanceOf)",
  "user" : {
    "login" : "maddingo",
    "id" : 362120,
    "avatar_url" : "https://avatars.githubusercontent.com/u/362120?",
    "gravatar_id" : "b590bd16b90bffa5a25f4fbbd17ede80",
    "url" : "https://api.github.com/users/maddingo",
    "html_url" : "https://github.com/maddingo",
    "followers_url" : "https://api.github.com/users/maddingo/followers",
    "following_url" : "https://api.github.com/users/maddingo/following{/other_user}",
    "gists_url" : "https://api.github.com/users/maddingo/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/maddingo/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/maddingo/subscriptions",
    "organizations_url" : "https://api.github.com/users/maddingo/orgs",
    "repos_url" : "https://api.github.com/users/maddingo/repos",
    "events_url" : "https://api.github.com/users/maddingo/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/maddingo/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/hamcrest",
    "name" : "hamcrest",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-08-12T13:09:41Z",
  "updated_at" : "2013-05-16T15:43:05Z",
  "closed_at" : "2013-05-16T15:43:05Z",
  "body" : "I want to do something like this to check if a list has items of a certain type.\n\n...\n    import static org.hamcrest.CoreMatchers.*;\n...\n    Iterable<AffiliationData> affiliationData = person.getAffiliationData(); \n    assertThat(affiliationData, hasItem(instanceOf(StudentData.class));\n\nThis causes a compilation error because the CoreMatchers.instanceOf method returns Matcher<Object>.\n\nI rewrote the IsInstanceOf matcher:\n\n    private static class MyIsInstanceOf<T> extends BaseMatcher<T> {\n      private final Class<?> theClass;\n\n    public MyIsInstanceOf(Class<?> theClass) {\n      this.theClass = theClass;\n    }\n\n    public boolean matches(Object item) {\n      return theClass.isInstance(item);\n    }\n\n    public void describeTo(Description description) {\n      description.appendText(\"an instance of \").appendText(theClass.getName());\n    }\n\n    public static <T> Matcher<T> myInstanceOf(Class<?> instanceOf) {\n      return new MyIsInstanceOf<T>(instanceOf);\n    }\n    }\n\nThe difference is that the type of the argument is not used a the template type.\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/137",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/137/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/137/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/137/events",
  "html_url" : "https://github.com/junit-team/junit/issues/137",
  "id" : 293423,
  "number" : 137,
  "title" : "Exceptions hidden in DataPoints methods",
  "user" : {
    "login" : "jschneider",
    "id" : 45393,
    "avatar_url" : "https://avatars.githubusercontent.com/u/45393?",
    "gravatar_id" : "a6b917f9418fb9bf015a0274375078f2",
    "url" : "https://api.github.com/users/jschneider",
    "html_url" : "https://github.com/jschneider",
    "followers_url" : "https://api.github.com/users/jschneider/followers",
    "following_url" : "https://api.github.com/users/jschneider/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jschneider/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jschneider/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jschneider/subscriptions",
    "organizations_url" : "https://api.github.com/users/jschneider/orgs",
    "repos_url" : "https://api.github.com/users/jschneider/repos",
    "events_url" : "https://api.github.com/users/jschneider/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jschneider/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 15,
  "created_at" : "2010-08-28T16:57:02Z",
  "updated_at" : "2013-08-13T00:37:10Z",
  "closed_at" : "2013-08-13T00:06:54Z",
  "body" : "This is a blocker!\r\nWhen a DataPoint(s) method throws an exception the DataPoint is skipped silently. This is a huge problem, because all tests are green - but did not run..."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/138",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/138/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/138/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/138/events",
  "html_url" : "https://github.com/junit-team/junit/pull/138",
  "id" : 296736,
  "number" : 138,
  "title" : "Adding ExpectedException.expectCause()",
  "user" : {
    "login" : "pholser",
    "id" : 77261,
    "avatar_url" : "https://avatars.githubusercontent.com/u/77261?",
    "gravatar_id" : "2f1e1064ae4295d285234c59f5dcb541",
    "url" : "https://api.github.com/users/pholser",
    "html_url" : "https://github.com/pholser",
    "followers_url" : "https://api.github.com/users/pholser/followers",
    "following_url" : "https://api.github.com/users/pholser/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pholser/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pholser/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pholser/subscriptions",
    "organizations_url" : "https://api.github.com/users/pholser/orgs",
    "repos_url" : "https://api.github.com/users/pholser/repos",
    "events_url" : "https://api.github.com/users/pholser/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pholser/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-08-31T21:23:02Z",
  "updated_at" : "2010-10-12T16:25:27Z",
  "closed_at" : "2010-10-12T23:24:11Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/138",
    "html_url" : "https://github.com/junit-team/junit/pull/138",
    "diff_url" : "https://github.com/junit-team/junit/pull/138.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/138.patch"
  },
  "body" : "Hi there,\r\n\r\nFound the need in my project to check the cause of an expected exception, but couldn't do it with what was there. Have a look at my changes and let me know what you think.\r\n\r\nAnother option would be to make the zero-arg ctor of ExpectedException protected or public, so that someone can subclass ExpectedException and add things like expectCause. I understand that you'd have to grant subclasses some means of tweaking field fMatcher at that point...bummer...8^(\r\n\r\nThanks,\r\np\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/139",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/139/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/139/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/139/events",
  "html_url" : "https://github.com/junit-team/junit/issues/139",
  "id" : 298117,
  "number" : 139,
  "title" : "JUnit 4 output is wrong when same test run twice via a suite",
  "user" : {
    "login" : "gmkayaker",
    "id" : 384036,
    "avatar_url" : "https://avatars.githubusercontent.com/u/384036?",
    "gravatar_id" : "f181fc79f888ee0d254c61d59be4234f",
    "url" : "https://api.github.com/users/gmkayaker",
    "html_url" : "https://github.com/gmkayaker",
    "followers_url" : "https://api.github.com/users/gmkayaker/followers",
    "following_url" : "https://api.github.com/users/gmkayaker/following{/other_user}",
    "gists_url" : "https://api.github.com/users/gmkayaker/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/gmkayaker/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/gmkayaker/subscriptions",
    "organizations_url" : "https://api.github.com/users/gmkayaker/orgs",
    "repos_url" : "https://api.github.com/users/gmkayaker/repos",
    "events_url" : "https://api.github.com/users/gmkayaker/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/gmkayaker/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2010-09-01T18:25:07Z",
  "updated_at" : "2013-12-10T18:17:35Z",
  "closed_at" : null,
  "body" : "Create a suite that runs the same test class twice. Run the suite. The output shows the class run twice but only the last (i.e. 2nd) class has a result annotation and only the tests in the last class have failure traces. If a test fails in both runs, both failure traces are included under the last class. If the test only fails in one of the runs, its hard to tell which run failed.\r\n\r\nI'm using the JUnit built into Eclipse 3.6."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/140",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/140/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/140/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/140/events",
  "html_url" : "https://github.com/junit-team/junit/issues/140",
  "id" : 315443,
  "number" : 140,
  "title" : "Default timeout",
  "user" : {
    "login" : "wokier",
    "id" : 378157,
    "avatar_url" : "https://avatars.githubusercontent.com/u/378157?",
    "gravatar_id" : "0f243c44c7d921cb41ebdfcf8202b0c3",
    "url" : "https://api.github.com/users/wokier",
    "html_url" : "https://github.com/wokier",
    "followers_url" : "https://api.github.com/users/wokier/followers",
    "following_url" : "https://api.github.com/users/wokier/following{/other_user}",
    "gists_url" : "https://api.github.com/users/wokier/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/wokier/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/wokier/subscriptions",
    "organizations_url" : "https://api.github.com/users/wokier/orgs",
    "repos_url" : "https://api.github.com/users/wokier/repos",
    "events_url" : "https://api.github.com/users/wokier/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/wokier/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2010-09-14T12:36:43Z",
  "updated_at" : "2011-04-29T15:45:15Z",
  "closed_at" : "2011-04-21T18:32:30Z",
  "body" : "add the ability to define a global default timeout\r\nbehavior similar to @Test(timeout=1000)\r\nProgramatically or passing JVM arg -Djunit.default.timeout=n\r\nSomething like this (default timeout part):\r\nhttp://www.attivio.com/blog/56-java-development/379-enhancing-junit-with-default-timeouts-and-stack-traces.html"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/141",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/141/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/141/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/141/events",
  "html_url" : "https://github.com/junit-team/junit/issues/141",
  "id" : 324385,
  "number" : 141,
  "title" : "If test that uses ExpectedException fails with an unexpected exception, the stack trace of the original exception is lost.",
  "user" : {
    "login" : "petur",
    "id" : 330577,
    "avatar_url" : "https://avatars.githubusercontent.com/u/330577?",
    "gravatar_id" : "4f12baafd71e7495a909c08c16199acb",
    "url" : "https://api.github.com/users/petur",
    "html_url" : "https://github.com/petur",
    "followers_url" : "https://api.github.com/users/petur/followers",
    "following_url" : "https://api.github.com/users/petur/following{/other_user}",
    "gists_url" : "https://api.github.com/users/petur/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/petur/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/petur/subscriptions",
    "organizations_url" : "https://api.github.com/users/petur/orgs",
    "repos_url" : "https://api.github.com/users/petur/repos",
    "events_url" : "https://api.github.com/users/petur/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/petur/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2010-09-20T10:02:13Z",
  "updated_at" : "2013-11-13T15:45:05Z",
  "closed_at" : "2013-11-13T15:45:05Z",
  "body" : "This test:\n\n    public class ExpTest {\n        @Rule\n         public final ExpectedException expected = ExpectedException.none();\n\n        @Test\n        public void test() throws Exception {\n            expected.expect(IllegalArgumentException.class);\n            one();\n        }\n\n        public void one() {\n            two();\n        }\n\n        public void two() {\n            throw new NullPointerException();\n        }\n\n        public static void main(String[] args) {\n            JUnitCore.main(ExpTest.class.getName());\n        }\n    }\n\nFails with this output:\n\n    Expected: an instance of java.lang.IllegalArgumentException\n       got: <java.lang.NullPointerException>\n\n  \tat org.junit.Assert.assertThat(Assert.java:778)\n  \tat org.junit.Assert.assertThat(Assert.java:736)\n  \tat org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:114)\n  \tat org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n  \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n  \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n  \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n  \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n  \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n  \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n  \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n  \tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n  \tat org.junit.runners.Suite.runChild(Suite.java:128)\n  \tat org.junit.runners.Suite.runChild(Suite.java:24)\n  \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n  \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n  \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n  \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n  \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n  \tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n  \tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n  \tat org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n  \tat org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n  \tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n  \tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n  \tat org.junit.runner.JUnitCore.main(JUnitCore.java:45)\n  \tat ExpTest.main(ExpTest.java:25)\n  \n  FAILURES!!!\n  Tests run: 1,  Failures: 1\n\nThe only way to find out where the unexpected exception is thrown is to comment out the expected.expect line. I think that ExpectedException should set the offending exception as the cause of the AssertionError that it throws so that the stack trace of the original exception is printed in the output.\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/142",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/142/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/142/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/142/events",
  "html_url" : "https://github.com/junit-team/junit/pull/142",
  "id" : 324979,
  "number" : 142,
  "title" : "Add support for multiple Include/Exclude categories for a Suite",
  "user" : {
    "login" : "aslakknutsen",
    "id" : 132158,
    "avatar_url" : "https://avatars.githubusercontent.com/u/132158?",
    "gravatar_id" : "3f27861ec08730fd02c91fe4129d2668",
    "url" : "https://api.github.com/users/aslakknutsen",
    "html_url" : "https://github.com/aslakknutsen",
    "followers_url" : "https://api.github.com/users/aslakknutsen/followers",
    "following_url" : "https://api.github.com/users/aslakknutsen/following{/other_user}",
    "gists_url" : "https://api.github.com/users/aslakknutsen/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/aslakknutsen/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/aslakknutsen/subscriptions",
    "organizations_url" : "https://api.github.com/users/aslakknutsen/orgs",
    "repos_url" : "https://api.github.com/users/aslakknutsen/repos",
    "events_url" : "https://api.github.com/users/aslakknutsen/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/aslakknutsen/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 32,
  "created_at" : "2010-09-20T17:41:38Z",
  "updated_at" : "2012-09-19T19:48:20Z",
  "closed_at" : "2012-08-02T19:33:49Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/142",
    "html_url" : "https://github.com/junit-team/junit/pull/142",
    "diff_url" : "https://github.com/junit-team/junit/pull/142.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/142.patch"
  },
  "body" : "Not all Categories can be described naturally(or unnaturally) in a class hierarchy. Categories runner should support filtering on multiple Include and Exclude categories for the same suite.\n\n@IncludeCategory({CatA.class, CatB.class})\nWill run the methods that contain ALL of the specified categories.\n\n@ExcludeCategory({CatC.class, CatD.class})\nWill not run the methods that contain ANY of the specified categories.\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/143",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/143/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/143/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/143/events",
  "html_url" : "https://github.com/junit-team/junit/issues/143",
  "id" : 330510,
  "number" : 143,
  "title" : "@Test annotation, needs settable before and after",
  "user" : {
    "login" : "ccjohn",
    "id" : 413537,
    "avatar_url" : "https://avatars.githubusercontent.com/u/413537?",
    "gravatar_id" : "7c3682b6b8ad6f73855f8dd30d909cd9",
    "url" : "https://api.github.com/users/ccjohn",
    "html_url" : "https://github.com/ccjohn",
    "followers_url" : "https://api.github.com/users/ccjohn/followers",
    "following_url" : "https://api.github.com/users/ccjohn/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ccjohn/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ccjohn/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ccjohn/subscriptions",
    "organizations_url" : "https://api.github.com/users/ccjohn/orgs",
    "repos_url" : "https://api.github.com/users/ccjohn/repos",
    "events_url" : "https://api.github.com/users/ccjohn/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ccjohn/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-09-23T20:58:45Z",
  "updated_at" : "2010-09-24T12:41:15Z",
  "closed_at" : "2010-09-24T10:18:17Z",
  "body" : "It would be useful if  @Test had a parameter that could set the before and after methods for the test\r\nfor excample @Test({before=setup,after=takedown}) where you could have one or more \"before\" and \"after\" routines (executed in the given order)\r\n\r\nThe only way to do this today is to have a separate class for each group of tests. "
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/144",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/144/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/144/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/144/events",
  "html_url" : "https://github.com/junit-team/junit/issues/144",
  "id" : 361210,
  "number" : 144,
  "title" : "ExpectedException Rule should allow a custom assertion message",
  "user" : {
    "login" : "kaylanimis",
    "id" : 67313,
    "avatar_url" : "https://avatars.githubusercontent.com/u/67313?",
    "gravatar_id" : "3c10ddc500106c066fef2c2768ad5dfb",
    "url" : "https://api.github.com/users/kaylanimis",
    "html_url" : "https://github.com/kaylanimis",
    "followers_url" : "https://api.github.com/users/kaylanimis/followers",
    "following_url" : "https://api.github.com/users/kaylanimis/following{/other_user}",
    "gists_url" : "https://api.github.com/users/kaylanimis/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/kaylanimis/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/kaylanimis/subscriptions",
    "organizations_url" : "https://api.github.com/users/kaylanimis/orgs",
    "repos_url" : "https://api.github.com/users/kaylanimis/repos",
    "events_url" : "https://api.github.com/users/kaylanimis/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/kaylanimis/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 6,
  "created_at" : "2010-10-13T20:25:48Z",
  "updated_at" : "2012-11-14T21:15:36Z",
  "closed_at" : "2012-11-14T21:15:36Z",
  "body" : "Line 118 of ExpectedException throws an AssertionError with a generic error message.  \r\n\r\nCurrently I've added a method that takes both a throwable and a message string which is then used in the error message as a suffix.  \r\n\r\nIs this something that can go into the tree?  Otherwise reimplementing the methods as protected would allow me to not have to reinvent the wheel so to speak."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/145",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/145/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/145/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/145/events",
  "html_url" : "https://github.com/junit-team/junit/pull/145",
  "id" : 377910,
  "number" : 145,
  "title" : "Provide description patterns for Parameterized tests (addressing issues #24, #44 and #135) ",
  "user" : {
    "login" : "ddimtirov",
    "id" : 359618,
    "avatar_url" : "https://avatars.githubusercontent.com/u/359618?",
    "gravatar_id" : "35565f5e3f3f47e6e65fa445e77e40fc",
    "url" : "https://api.github.com/users/ddimtirov",
    "html_url" : "https://github.com/ddimtirov",
    "followers_url" : "https://api.github.com/users/ddimtirov/followers",
    "following_url" : "https://api.github.com/users/ddimtirov/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ddimtirov/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ddimtirov/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ddimtirov/subscriptions",
    "organizations_url" : "https://api.github.com/users/ddimtirov/orgs",
    "repos_url" : "https://api.github.com/users/ddimtirov/repos",
    "events_url" : "https://api.github.com/users/ddimtirov/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ddimtirov/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/parameterized",
    "name" : "parameterized",
    "color" : "0052cc"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 11,
  "created_at" : "2010-10-23T13:27:33Z",
  "updated_at" : "2014-02-12T15:30:58Z",
  "closed_at" : "2012-04-12T19:06:45Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/145",
    "html_url" : "https://github.com/junit-team/junit/pull/145",
    "diff_url" : "https://github.com/junit-team/junit/pull/145.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/145.patch"
  },
  "body" : "Addresses issues #24, #44 and #135\r\n\r\nUsually when using parameterized tests, the reports display [0], [1], [2] for each run of the fixture and methodName[0], methodName[1], etc. for the actual tests. This creates the situation where you need to lookup the actual parameters in the sources to see what is the actual failure. A better approach would be if we could customize display names to contain more information about the scenario we are running.\r\n\r\nHere (http://github.com/ddimtirov/junit/commit/b99a3) is a forked version with patched Parameterized runner that achieves this and a basic test for the functionality. I've also added a basic test for illustration.\r\n\r\nThe new feature works by allowing one to specify fixtureDescription and testDescription patterns to the Parameters annotation. This has the benefit that the formatting is kept close to the data and the default values are chosen to be backwards compatible, so there is no impact to the users that choose not to specify the patterns. See Javadoc for details."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/146",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/146/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/146/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/146/events",
  "html_url" : "https://github.com/junit-team/junit/issues/146",
  "id" : 380681,
  "number" : 146,
  "title" : "Multiple categories for @IncludeCategory and @ExcludeCategory",
  "user" : {
    "login" : "merland",
    "id" : 453092,
    "avatar_url" : "https://avatars.githubusercontent.com/u/453092?",
    "gravatar_id" : "61192ef69a64d18204cace6642620ae9",
    "url" : "https://api.github.com/users/merland",
    "html_url" : "https://github.com/merland",
    "followers_url" : "https://api.github.com/users/merland/followers",
    "following_url" : "https://api.github.com/users/merland/following{/other_user}",
    "gists_url" : "https://api.github.com/users/merland/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/merland/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/merland/subscriptions",
    "organizations_url" : "https://api.github.com/users/merland/orgs",
    "repos_url" : "https://api.github.com/users/merland/repos",
    "events_url" : "https://api.github.com/users/merland/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/merland/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 11,
  "created_at" : "2010-10-25T13:46:44Z",
  "updated_at" : "2012-12-04T10:01:19Z",
  "closed_at" : null,
  "body" : "Hi list!\r\n\r\nIt would be great if @IncludeCategory and @ExcludeCategory would accept multiple categories\r\nlike the @Category annotation does today.\r\n\r\nThere is a not-so-beatiful workaround. You can get multiple includes or excludes\r\nif you create an inheritance hierarchy of suites and exclude one category on\r\neach level.\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/147",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/147/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/147/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/147/events",
  "html_url" : "https://github.com/junit-team/junit/issues/147",
  "id" : 381784,
  "number" : 147,
  "title" : "Enhancement: Dependency Injection test groups",
  "user" : {
    "login" : "reccles",
    "id" : 197754,
    "avatar_url" : "https://avatars.githubusercontent.com/u/197754?",
    "gravatar_id" : "757caa4bf9006009f8c85d1920d70ea8",
    "url" : "https://api.github.com/users/reccles",
    "html_url" : "https://github.com/reccles",
    "followers_url" : "https://api.github.com/users/reccles/followers",
    "following_url" : "https://api.github.com/users/reccles/following{/other_user}",
    "gists_url" : "https://api.github.com/users/reccles/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/reccles/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/reccles/subscriptions",
    "organizations_url" : "https://api.github.com/users/reccles/orgs",
    "repos_url" : "https://api.github.com/users/reccles/repos",
    "events_url" : "https://api.github.com/users/reccles/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/reccles/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-10-25T23:42:26Z",
  "updated_at" : "2012-11-16T19:43:02Z",
  "closed_at" : null,
  "body" : "Problem:\r\n\r\nIt would be beneficial to bundle a set of tests against an API into a single suite such that those implementing tests in third party packages can easily validate their behavior against my API test group. For instance, given the set of test classes:\r\n\r\nWhenAPIExhibitsBehaviorA\r\nWhenAPIExhibitsBehaviorB\r\nWhenAPIExhibitsBehaviorC\r\n\r\nAll of these tests should be run against new and 3rd party implementations of the API with minimal syntax overhead. \r\n\r\n\r\nCurrent Limitations:\r\n\r\nThe best approximation of this feature using the current library is to implement an abstract base implementation for each WhenAPIExchibitsXXX which new implementations extend and provide a factory method that produces their implementation of the API (which each test subsequently uses). There is a tendency to create a monolithic test instead of separate behavior tests to reduce maintenance and simplify the number of required subclasses.\r\n\r\nAlternatively you can create a paramertised list of implementations to test against each WhenAPIExhibitsXXX class. This requires maintenance of the paramertised lists but also is inadequate for 3rd party library validation. It also suffers from the 'monolithic superclass' of behavior tests.\r\n\r\n\r\n(a) proposed solution:\r\n\r\nInclude a new kind of Runner type that runs groups of tests, and allows dependency injection for the test API. 3rd parties that would like to test their implementation against my group of API behavior tests can delare what dependency injection group they are interested in using. The runner will use their test class as a factory to build and then inject into each defined API in the group. \r\n\r\nThis would provide an easy way to build groups of behavior test that 3rd parties can validate against and fit cleanly with the existing infrastructure. \r\n\r\nIf this is already provided, then perhaps an updated example set would be useful. \r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/148",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/148/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/148/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/148/events",
  "html_url" : "https://github.com/junit-team/junit/issues/148",
  "id" : 393571,
  "number" : 148,
  "title" : "Hamcrest inclusion in the JUnit jar causes issues while testing on the Android",
  "user" : {
    "login" : "nicholaslemay",
    "id" : 196029,
    "avatar_url" : "https://avatars.githubusercontent.com/u/196029?",
    "gravatar_id" : "4c75fa07217721f72d1ecd82688f0d86",
    "url" : "https://api.github.com/users/nicholaslemay",
    "html_url" : "https://github.com/nicholaslemay",
    "followers_url" : "https://api.github.com/users/nicholaslemay/followers",
    "following_url" : "https://api.github.com/users/nicholaslemay/following{/other_user}",
    "gists_url" : "https://api.github.com/users/nicholaslemay/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/nicholaslemay/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/nicholaslemay/subscriptions",
    "organizations_url" : "https://api.github.com/users/nicholaslemay/orgs",
    "repos_url" : "https://api.github.com/users/nicholaslemay/repos",
    "events_url" : "https://api.github.com/users/nicholaslemay/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/nicholaslemay/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2010-11-01T14:38:13Z",
  "updated_at" : "2010-11-01T15:06:17Z",
  "closed_at" : "2010-11-01T15:06:17Z",
  "body" : "I am using Hamcrest matchers and JUnit to test out my Android application. In my buildpath I have both the JUnit and Hamcrest-all jars. \r\n\r\nWhen deploying my test App on my Android emulator I get a \"dalvik format 1\" error because two classes share the same name since they are found both in the Hamcrest jar and the JUnit jar.\r\n\r\nI have fixed the issue for me by removing the Hamcrest folder from the jUnit jar. I do not know the reason behind the partial inclusion of Hamcrest within the JUnit jar, but it is causing issues when testing out Android Apps.\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/149",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/149/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/149/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/149/events",
  "html_url" : "https://github.com/junit-team/junit/pull/149",
  "id" : 395983,
  "number" : 149,
  "title" : "Timeout non-deterministic",
  "user" : {
    "login" : "awreece",
    "id" : 464471,
    "avatar_url" : "https://avatars.githubusercontent.com/u/464471?",
    "gravatar_id" : "e42cf5cede6c23af88068ae4fa02fb4c",
    "url" : "https://api.github.com/users/awreece",
    "html_url" : "https://github.com/awreece",
    "followers_url" : "https://api.github.com/users/awreece/followers",
    "following_url" : "https://api.github.com/users/awreece/following{/other_user}",
    "gists_url" : "https://api.github.com/users/awreece/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/awreece/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/awreece/subscriptions",
    "organizations_url" : "https://api.github.com/users/awreece/orgs",
    "repos_url" : "https://api.github.com/users/awreece/repos",
    "events_url" : "https://api.github.com/users/awreece/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/awreece/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 11,
  "created_at" : "2010-11-02T16:40:39Z",
  "updated_at" : "2013-07-27T23:33:07Z",
  "closed_at" : "2013-07-08T23:59:09Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/149",
    "html_url" : "https://github.com/junit-team/junit/pull/149",
    "diff_url" : "https://github.com/junit-team/junit/pull/149.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/149.patch"
  },
  "body" : "The timeout argument for the @Test annotation is non-deterministic. \r\n\r\nIt times out after waiting a certain amount of clock time, rather than CPU time - this means the success / failure of the test will depend on the current state of the machine ( what other processes are running, etc ). \r\n\r\nThis has a relatively simple fix: use ThreadMXBean to figure out the CPU time taken. Only org.junit.internal.runners.statements.FailOnTimeout.java would need to be modified."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/150",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/150/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/150/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/150/events",
  "html_url" : "https://github.com/junit-team/junit/issues/150",
  "id" : 398041,
  "number" : 150,
  "title" : "Unable to run JUnit from command line in Linux",
  "user" : {
    "login" : "gusega",
    "id" : 465806,
    "avatar_url" : "https://avatars.githubusercontent.com/u/465806?",
    "gravatar_id" : "049743523d007d7f9e2fe704b5d1bbf4",
    "url" : "https://api.github.com/users/gusega",
    "html_url" : "https://github.com/gusega",
    "followers_url" : "https://api.github.com/users/gusega/followers",
    "following_url" : "https://api.github.com/users/gusega/following{/other_user}",
    "gists_url" : "https://api.github.com/users/gusega/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/gusega/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/gusega/subscriptions",
    "organizations_url" : "https://api.github.com/users/gusega/orgs",
    "repos_url" : "https://api.github.com/users/gusega/repos",
    "events_url" : "https://api.github.com/users/gusega/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/gusega/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2010-11-03T13:46:50Z",
  "updated_at" : "2012-04-22T06:00:25Z",
  "closed_at" : "2012-04-22T06:00:25Z",
  "body" : "Running \"java -cp .:junit-4.8.2.jar org.junit.runner.JUnitCore org.junit.tests.AllTests\" from unzipped junit directory leads to an exception:\r\n\r\n'JUnit version 4.8.2\r\nException in thread \"main\" java.lang.NoClassDefFoundError: org/junit/tests/AllTests (wrong name: lib/junit4.8.2/org/junit/tests/AllTests)\r\n\tat java.lang.ClassLoader.defineClass1(Native Method)\r\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\r\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\r\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\r\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\r\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\r\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\r\n\tat java.lang.Class.forName0(Native Method)\r\n\tat java.lang.Class.forName(Class.java:164)\r\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:89)\r\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\r\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:45)'\r\n\r\nsetting CLASSPATH environment variable to .:junit-4.8.2.jar or $JUNIT_DIR:junit-4.8.2.jar, where $JUNIT_DIR is the path for unzipped junit, results in the same effect."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/151",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/151/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/151/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/151/events",
  "html_url" : "https://github.com/junit-team/junit/pull/151",
  "id" : 402273,
  "number" : 151,
  "title" : "Could you please consider this patch, for issue 114 ?",
  "user" : {
    "login" : "krosenvold",
    "id" : 67744,
    "avatar_url" : "https://avatars.githubusercontent.com/u/67744?",
    "gravatar_id" : "48ad44fb319fc06a737a082820bff3ea",
    "url" : "https://api.github.com/users/krosenvold",
    "html_url" : "https://github.com/krosenvold",
    "followers_url" : "https://api.github.com/users/krosenvold/followers",
    "following_url" : "https://api.github.com/users/krosenvold/following{/other_user}",
    "gists_url" : "https://api.github.com/users/krosenvold/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/krosenvold/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/krosenvold/subscriptions",
    "organizations_url" : "https://api.github.com/users/krosenvold/orgs",
    "repos_url" : "https://api.github.com/users/krosenvold/repos",
    "events_url" : "https://api.github.com/users/krosenvold/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/krosenvold/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 13,
  "created_at" : "2010-11-05T11:48:01Z",
  "updated_at" : "2012-01-31T19:54:54Z",
  "closed_at" : "2012-01-31T19:54:54Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/151",
    "html_url" : "https://github.com/junit-team/junit/pull/151",
    "diff_url" : "https://github.com/junit-team/junit/pull/151.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/151.patch"
  },
  "body" : "I'm currrently working on maven-surefire to increase overall parallel throughput. I have fixed a couple of overly broad synchronizations within surefire, and this last one is within junit. The results are quite spectacular, especially for unit-tests.\r\n\r\nThe synchronized block was originally added by me in one of my earlier thread safety patches (to \"make things work\"). This is a \"make it good\" patch.\r\n\r\n\r\n"
} ]