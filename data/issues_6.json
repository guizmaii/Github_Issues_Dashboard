[ {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/182",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/182/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/182/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/182/events",
  "html_url" : "https://github.com/junit-team/junit/pull/182",
  "id" : 526563,
  "number" : 182,
  "title" : "[Enhancement] for parameterized JUnit test, Parameter annotation",
  "user" : {
    "login" : "jherault",
    "id" : 262878,
    "avatar_url" : "https://avatars.githubusercontent.com/u/262878?",
    "gravatar_id" : "85bc99399d2c807b788ea1279d1d3df7",
    "url" : "https://api.github.com/users/jherault",
    "html_url" : "https://github.com/jherault",
    "followers_url" : "https://api.github.com/users/jherault/followers",
    "following_url" : "https://api.github.com/users/jherault/following{/other_user}",
    "gists_url" : "https://api.github.com/users/jherault/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/jherault/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/jherault/subscriptions",
    "organizations_url" : "https://api.github.com/users/jherault/orgs",
    "repos_url" : "https://api.github.com/users/jherault/repos",
    "events_url" : "https://api.github.com/users/jherault/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/jherault/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/parameterized",
    "name" : "parameterized",
    "color" : "0052cc"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 27,
  "created_at" : "2011-01-14T08:54:47Z",
  "updated_at" : "2014-02-12T15:30:11Z",
  "closed_at" : "2012-08-17T07:40:51Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/182",
    "html_url" : "https://github.com/junit-team/junit/pull/182",
    "diff_url" : "https://github.com/junit-team/junit/pull/182.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/182.patch"
  },
  "body" : "Hi,\r\n\r\nI added the new annotation @Parameter in your framework for JUnit tests that are ran with the Parameterized runner. With this new annotation, no constructor for the test classes. When a field parameter is annoted with @Parameter, this field is reflectively set.\r\n\r\nLet me know what do you think about it.\r\n\r\nThank you.\r\n\r\nBest,\r\n\r\nJérémy Hérault"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/183",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/183/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/183/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/183/events",
  "html_url" : "https://github.com/junit-team/junit/issues/183",
  "id" : 538717,
  "number" : 183,
  "title" : "introduce @Fail annotation for test methods that must fail",
  "user" : {
    "login" : "SebastianDietrich",
    "id" : 574225,
    "avatar_url" : "https://avatars.githubusercontent.com/u/574225?",
    "gravatar_id" : "521a38d9f09e46315a36d4f6775cadcf",
    "url" : "https://api.github.com/users/SebastianDietrich",
    "html_url" : "https://github.com/SebastianDietrich",
    "followers_url" : "https://api.github.com/users/SebastianDietrich/followers",
    "following_url" : "https://api.github.com/users/SebastianDietrich/following{/other_user}",
    "gists_url" : "https://api.github.com/users/SebastianDietrich/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/SebastianDietrich/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/SebastianDietrich/subscriptions",
    "organizations_url" : "https://api.github.com/users/SebastianDietrich/orgs",
    "repos_url" : "https://api.github.com/users/SebastianDietrich/repos",
    "events_url" : "https://api.github.com/users/SebastianDietrich/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/SebastianDietrich/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2011-01-20T09:53:17Z",
  "updated_at" : "2012-11-13T20:28:08Z",
  "closed_at" : "2012-11-13T20:28:08Z",
  "body" : "Sometimes it is necessary to check if a given test fails. e.g. when a functionality should only work under given circumstances e.g. running against different backend systems, some of them up, some down and you want your test to run through / fail accordingly.\r\n\r\n--> introduce an annotation that marks a test-method as \"must fail\"\r\n\r\nThis could even be enhanced with an additional parameter \"@Fail (when = myCondition)\" to represent conditions (returning true/false) under which the test must fail/succeed"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/184",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/184/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/184/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/184/events",
  "html_url" : "https://github.com/junit-team/junit/pull/184",
  "id" : 548455,
  "number" : 184,
  "title" : "protected constructor for Description",
  "user" : {
    "login" : "aslakhellesoy",
    "id" : 1000,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1000?",
    "gravatar_id" : "0be0e4aa42aacd9a8a95c792de273ca7",
    "url" : "https://api.github.com/users/aslakhellesoy",
    "html_url" : "https://github.com/aslakhellesoy",
    "followers_url" : "https://api.github.com/users/aslakhellesoy/followers",
    "following_url" : "https://api.github.com/users/aslakhellesoy/following{/other_user}",
    "gists_url" : "https://api.github.com/users/aslakhellesoy/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/aslakhellesoy/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/aslakhellesoy/subscriptions",
    "organizations_url" : "https://api.github.com/users/aslakhellesoy/orgs",
    "repos_url" : "https://api.github.com/users/aslakhellesoy/repos",
    "events_url" : "https://api.github.com/users/aslakhellesoy/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/aslakhellesoy/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 6,
  "created_at" : "2011-01-24T23:48:49Z",
  "updated_at" : "2012-01-31T19:56:41Z",
  "closed_at" : "2012-01-31T19:56:41Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/184",
    "html_url" : "https://github.com/junit-team/junit/pull/184",
    "diff_url" : "https://github.com/junit-team/junit/pull/184.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/184.patch"
  },
  "body" : "I'm the author of Cucumber - http://cukes.info/, which I'm in the process of porting to pure Java and integrating with JUnit.\r\n\r\nWhile doing this I realised that often Descriptions (representing  Cucumber \"scenario\" or \"step) will have the same name while representing different parts of the test hierarchy. That's fine in Cucumber, but I don't want them to be treated as equal since this breaks behaviour in IntelliJ's runner (and possibly others). I need to subclass Description so I can override equals().\r\n\r\nThis simple patch makes that possible. I would greatly appreciate it if this small fix made it into the next release.\r\n\r\nAslak\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/185",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/185/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/185/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/185/events",
  "html_url" : "https://github.com/junit-team/junit/issues/185",
  "id" : 555875,
  "number" : 185,
  "title" : "MethodRule Timeout might prevent execution of nested Rules",
  "user" : {
    "login" : "aklotz",
    "id" : 586333,
    "avatar_url" : "https://avatars.githubusercontent.com/u/586333?",
    "gravatar_id" : "7966058c971a0295a8faf9d8bca272b4",
    "url" : "https://api.github.com/users/aklotz",
    "html_url" : "https://github.com/aklotz",
    "followers_url" : "https://api.github.com/users/aklotz/followers",
    "following_url" : "https://api.github.com/users/aklotz/following{/other_user}",
    "gists_url" : "https://api.github.com/users/aklotz/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/aklotz/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/aklotz/subscriptions",
    "organizations_url" : "https://api.github.com/users/aklotz/orgs",
    "repos_url" : "https://api.github.com/users/aklotz/repos",
    "events_url" : "https://api.github.com/users/aklotz/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/aklotz/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2011-01-27T12:11:51Z",
  "updated_at" : "2011-01-28T10:06:21Z",
  "closed_at" : "2011-01-27T21:27:30Z",
  "body" : "I use the MethodRule \"Timeout\" to controll the time to wait for another Thread notifying the Timeoutthread that expected results have arrived. So if the results do not arrive in the defined time the Timeout thread is joined with the main Thread again.\n\nThe problem raises, if the Timeout-Rule has a nested RunAfters Statement. The RunAfters will not be executed, since the Timeout thread is still waiting or rather killed on system exit.\n\nThe same behavior will occur if I use ExternalResource MethodRule and this Rule is nested in the Timeout-Rule. So in this case it depends on the sequence of nesting the Rules. So it is not guaranteed that the ExternalResource calls its after-method if it is combined with the Timeout-Rule.\n\nIn my opinion this is a conceptional problem of nesting statements in rules which start another thread. Starting another thread in rules might cause unpredicitional behaviour. So maybe Timeout should not be implemented as a Rule?"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/186",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/186/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/186/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/186/events",
  "html_url" : "https://github.com/junit-team/junit/issues/186",
  "id" : 556191,
  "number" : 186,
  "title" : "MethodRule Timeout might prevent execution of nested Rules",
  "user" : {
    "login" : "aklotz",
    "id" : 586333,
    "avatar_url" : "https://avatars.githubusercontent.com/u/586333?",
    "gravatar_id" : "7966058c971a0295a8faf9d8bca272b4",
    "url" : "https://api.github.com/users/aklotz",
    "html_url" : "https://github.com/aklotz",
    "followers_url" : "https://api.github.com/users/aklotz/followers",
    "following_url" : "https://api.github.com/users/aklotz/following{/other_user}",
    "gists_url" : "https://api.github.com/users/aklotz/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/aklotz/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/aklotz/subscriptions",
    "organizations_url" : "https://api.github.com/users/aklotz/orgs",
    "repos_url" : "https://api.github.com/users/aklotz/repos",
    "events_url" : "https://api.github.com/users/aklotz/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/aklotz/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 11,
  "created_at" : "2011-01-27T14:43:37Z",
  "updated_at" : "2013-04-05T17:15:48Z",
  "closed_at" : "2013-04-05T17:15:48Z",
  "body" : "I use the MethodRule \"Timeout\" to controll the time to wait for another Thread notifying the Timeoutthread that expected results have arrived. So if the results do not arrive in the defined time the Timeout thread is joined with the main Thread again.\n\nThe problem raises, if the Timeout-Rule has a nested RunAfters Statement. The RunAfters will not be executed, since the Timeout thread is still waiting or rather killed on system exit.\n\nThe same behavior will occur if I use ExternalResource MethodRule and this Rule is nested in the Timeout-Rule. So in this case it depends on the sequence of nesting the Rules. So it is not guaranteed that the ExternalResource calls its after-method if it is combined with the Timeout-Rule.\n\nIn my opinion this is a conceptional problem of nesting statements in rules which start another thread. Starting another thread in rules might cause unpredicitional behaviour. So maybe Timeout should not be implemented as a Rule?\n\n\nTo illustrate the issue I wrote this test opening a non existing URLConnection which takes some Time to execute.\n<pre>\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.MethodRule;\nimport org.junit.rules.Timeout;\n\npublic class TimeoutTests {\n\n@Rule\npublic MethodRule time = new Timeout(10);\n\nprivate URLConnection connection;\n\n@Before\npublic void openConnection() throws Exception {\n    URL url = new URL(\"http://notexistingURL\");\n    this.connection = url.openConnection();\n    System.out.println(\"Connection opened\");\n}\n\n@After\npublic void discardConnection() throws Exception {\n    this.connection = null;\n    System.out.println(\"Connection discarded\");\n}\n\n@Test\npublic void longRunning() throws Exception {\n    System.out.println(\"Read header...\");\n    this.connection.getHeaderField(0);\n    System.out.println(\"finished reading header.\");\n}\n\n}\n</pre>\nHere is another example with the ExternalResource Rule. If you change the sequence of declaration of the two Rules, you get different behaviours.\nIn this case, the after-method is not invoked. If you switch the order of Rule declaration, the after-method is called.\n<pre>\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport org.junit.After;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExternalResource;\nimport org.junit.rules.MethodRule;\nimport org.junit.rules.Timeout;\n\npublic class TimeoutTestsWithRules {\n\nprivate URLConnection connection;\n\n@Rule\npublic MethodRule resource = new ExternalResource() {\n\n    @Override\n    protected void before() throws Throwable {\n        URL url = new URL(\"http://notexistingURL\");\n        TimeoutTestsWithRules.this.connection = url.openConnection();\n        System.out.println(\"Connection opened\");\n    };\n\n    @Override\n    protected void after() {\n        TimeoutTestsWithRules.this.connection = null;\n        System.out.println(\"Connection discarded\");\n    };\n\n};\n\n@Rule\npublic MethodRule time = new Timeout(1);\n\n@Test\npublic void longRunning() throws Exception {\n    System.out.println(\"Read header...\");\n    this.connection.getHeaderField(0);\n    System.out.println(\"finished reading header.\");\n}\n\n}\n</pre>"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/187",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/187/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/187/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/187/events",
  "html_url" : "https://github.com/junit-team/junit/issues/187",
  "id" : 564714,
  "number" : 187,
  "title" : "JUnit 4.9b2 depends on Java 6",
  "user" : {
    "login" : "mkeller",
    "id" : 154496,
    "avatar_url" : "https://avatars.githubusercontent.com/u/154496?",
    "gravatar_id" : "e5986987b470c65c85f247270d891217",
    "url" : "https://api.github.com/users/mkeller",
    "html_url" : "https://github.com/mkeller",
    "followers_url" : "https://api.github.com/users/mkeller/followers",
    "following_url" : "https://api.github.com/users/mkeller/following{/other_user}",
    "gists_url" : "https://api.github.com/users/mkeller/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/mkeller/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/mkeller/subscriptions",
    "organizations_url" : "https://api.github.com/users/mkeller/orgs",
    "repos_url" : "https://api.github.com/users/mkeller/repos",
    "events_url" : "https://api.github.com/users/mkeller/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/mkeller/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/regression",
    "name" : "regression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2011-01-31T17:10:23Z",
  "updated_at" : "2011-04-29T19:30:47Z",
  "closed_at" : "2011-04-29T19:30:47Z",
  "body" : "The latest change in junit.framework.Assert#format(String, Object, Object) made JUnit depend on Java 6, because java.lang.String#isEmpty() has only been added in 1.6.\r\n\r\nCould you please replace \"!message.isEmpty()\" with \"message.length() != 0\"?"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/188",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/188/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/188/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/188/events",
  "html_url" : "https://github.com/junit-team/junit/pull/188",
  "id" : 572649,
  "number" : 188,
  "title" : "Rules step should be the last in the javadoc of BlockJUnit4ClassRunner.methodBlock",
  "user" : {
    "login" : "marciomazza",
    "id" : 579665,
    "avatar_url" : "https://avatars.githubusercontent.com/u/579665?",
    "gravatar_id" : "18ea4c1e271c0b3ffca2da11df5191c4",
    "url" : "https://api.github.com/users/marciomazza",
    "html_url" : "https://github.com/marciomazza",
    "followers_url" : "https://api.github.com/users/marciomazza/followers",
    "following_url" : "https://api.github.com/users/marciomazza/following{/other_user}",
    "gists_url" : "https://api.github.com/users/marciomazza/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/marciomazza/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/marciomazza/subscriptions",
    "organizations_url" : "https://api.github.com/users/marciomazza/orgs",
    "repos_url" : "https://api.github.com/users/marciomazza/repos",
    "events_url" : "https://api.github.com/users/marciomazza/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/marciomazza/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/regression",
    "name" : "regression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 0,
  "created_at" : "2011-02-03T14:43:28Z",
  "updated_at" : "2011-03-09T14:06:01Z",
  "closed_at" : "2011-03-09T14:06:01Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/188",
    "html_url" : "https://github.com/junit-team/junit/pull/188",
    "diff_url" : "https://github.com/junit-team/junit/pull/188.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/188.patch"
  },
  "body" : "In the javadoc of \r\n  org.junit.runners.BlockJUnit4ClassRunner.methodBlock(FrameworkMethod method)\r\nthe step of modification by rules should be the last one.\r\n\r\nAs Statements in general only expose their \"evaluate\" method and nothing more, rules can actually only either totally prevent the execution of all steps together, or decorate the whole bunch. And that includes RunBefores and RunAfters, as well as all the other recursively wrapped Statements.\r\n\r\nAnd they can also modify thrown exceptions, including the ones thrown by befores and afters."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/189",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/189/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/189/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/189/events",
  "html_url" : "https://github.com/junit-team/junit/issues/189",
  "id" : 573888,
  "number" : 189,
  "title" : "Enhancement: Give suites access to test objects",
  "user" : {
    "login" : "drekka",
    "id" : 153837,
    "avatar_url" : "https://avatars.githubusercontent.com/u/153837?",
    "gravatar_id" : "18e7076ae199249ce1ddeff14b85ca42",
    "url" : "https://api.github.com/users/drekka",
    "html_url" : "https://github.com/drekka",
    "followers_url" : "https://api.github.com/users/drekka/followers",
    "following_url" : "https://api.github.com/users/drekka/following{/other_user}",
    "gists_url" : "https://api.github.com/users/drekka/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/drekka/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/drekka/subscriptions",
    "organizations_url" : "https://api.github.com/users/drekka/orgs",
    "repos_url" : "https://api.github.com/users/drekka/repos",
    "events_url" : "https://api.github.com/users/drekka/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/drekka/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 8,
  "created_at" : "2011-02-04T00:21:51Z",
  "updated_at" : "2013-07-25T19:45:57Z",
  "closed_at" : null,
  "body" : "I'm currently working with a legacy test suite which has a very costly setup and teardown. It's old code which uses an extension of TestSetup to start and stop the server. It overrides setUp() to start the server and then loop through each class in the suite and inject references to server objects into them.\r\n\r\nI'm trying to work out how to do this using the new @Suite and @Suite.Class annotations. I've searched the web and read a lot of stuff on @Rule and MethodRules. I cannot see how to do it. There doesn't appear to be any way that stuff setup in a @BeforeClass in a @Suite annotated class can be passed/injected into the tests being run.\r\n\r\nAnother thought was to create an extension of Suite and override one or more methods. But I could see how to get information from the @BeforeClass method of the class annotated with @suite into each suite class after it is instantiated.\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/190",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/190/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/190/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/190/events",
  "html_url" : "https://github.com/junit-team/junit/pull/190",
  "id" : 592012,
  "number" : 190,
  "title" : "RFC: Runtime @Ignore",
  "user" : {
    "login" : "lacostej",
    "id" : 24282,
    "avatar_url" : "https://avatars.githubusercontent.com/u/24282?",
    "gravatar_id" : "a1d6067ce2491ac3fb9551fd637de960",
    "url" : "https://api.github.com/users/lacostej",
    "html_url" : "https://github.com/lacostej",
    "followers_url" : "https://api.github.com/users/lacostej/followers",
    "following_url" : "https://api.github.com/users/lacostej/following{/other_user}",
    "gists_url" : "https://api.github.com/users/lacostej/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/lacostej/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/lacostej/subscriptions",
    "organizations_url" : "https://api.github.com/users/lacostej/orgs",
    "repos_url" : "https://api.github.com/users/lacostej/repos",
    "events_url" : "https://api.github.com/users/lacostej/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/lacostej/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 9,
  "created_at" : "2011-02-11T14:41:30Z",
  "updated_at" : "2011-02-22T17:11:34Z",
  "closed_at" : "2011-02-14T22:22:16Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/190",
    "html_url" : "https://github.com/junit-team/junit/pull/190",
    "diff_url" : "https://github.com/junit-team/junit/pull/190.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/190.patch"
  },
  "body" : "I've added the ability to Ignore tests based on conditions identified at runtime. I am not particularly happy with the contract and method/class names of the new interface RuntimeCondition (do you want interfaces at that level of the framework ?). Not did I fully document/clean the patch yet. This is just a RFC.\r\n\r\nI am using the same feature to ignore some network dependent tests at runtime, with my own Runner here: https://github.com/lacostej/web-validators/commit/1a4d08e3336a8689dd3f4fae0941d1b498057d0f I don't think it's nice to have to use a Runner for that.\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/191",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/191/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/191/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/191/events",
  "html_url" : "https://github.com/junit-team/junit/pull/191",
  "id" : 593615,
  "number" : 191,
  "title" : "Javadoc fix",
  "user" : {
    "login" : "lacostej",
    "id" : 24282,
    "avatar_url" : "https://avatars.githubusercontent.com/u/24282?",
    "gravatar_id" : "a1d6067ce2491ac3fb9551fd637de960",
    "url" : "https://api.github.com/users/lacostej",
    "html_url" : "https://github.com/lacostej",
    "followers_url" : "https://api.github.com/users/lacostej/followers",
    "following_url" : "https://api.github.com/users/lacostej/following{/other_user}",
    "gists_url" : "https://api.github.com/users/lacostej/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/lacostej/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/lacostej/subscriptions",
    "organizations_url" : "https://api.github.com/users/lacostej/orgs",
    "repos_url" : "https://api.github.com/users/lacostej/repos",
    "events_url" : "https://api.github.com/users/lacostej/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/lacostej/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/regression",
    "name" : "regression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2011-02-12T07:25:51Z",
  "updated_at" : "2011-03-04T21:13:53Z",
  "closed_at" : "2011-03-04T21:13:53Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/191",
    "html_url" : "https://github.com/junit-team/junit/pull/191",
    "diff_url" : "https://github.com/junit-team/junit/pull/191.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/191.patch"
  },
  "body" : "The Value class doesn't exist."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/192",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/192/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/192/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/192/events",
  "html_url" : "https://github.com/junit-team/junit/pull/192",
  "id" : 606285,
  "number" : 192,
  "title" : "Filtering JUnit3 test suites",
  "user" : {
    "login" : "david-schuler",
    "id" : 622832,
    "avatar_url" : "https://avatars.githubusercontent.com/u/622832?",
    "gravatar_id" : "eeff0b00308f4a1117f2f20226880e5d",
    "url" : "https://api.github.com/users/david-schuler",
    "html_url" : "https://github.com/david-schuler",
    "followers_url" : "https://api.github.com/users/david-schuler/followers",
    "following_url" : "https://api.github.com/users/david-schuler/following{/other_user}",
    "gists_url" : "https://api.github.com/users/david-schuler/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/david-schuler/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/david-schuler/subscriptions",
    "organizations_url" : "https://api.github.com/users/david-schuler/orgs",
    "repos_url" : "https://api.github.com/users/david-schuler/repos",
    "events_url" : "https://api.github.com/users/david-schuler/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/david-schuler/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 7,
  "created_at" : "2011-02-17T11:22:02Z",
  "updated_at" : "2012-05-16T19:59:36Z",
  "closed_at" : "2012-05-16T19:59:36Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/192",
    "html_url" : "https://github.com/junit-team/junit/pull/192",
    "diff_url" : "https://github.com/junit-team/junit/pull/192.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/192.patch"
  },
  "body" : "When filtering JUnit3 test suites, I experienced two issues where the\r\n`SuiteMethod` runner did not behave as I expected:\r\n\r\n1. `NoTestsRemainException` is not thrown when the filtered test suite\r\ncontains no tests.\r\n\r\n2. Filtering cannot be applied to test cases of classes that were added to a\r\ntest suite. For example in the following situation, a filter applied to a\r\n`SuiteMethod` constructed from `ExampleSuite` will not see the test case\r\n`test1` of `ExampleTest`.\r\n\r\n      public static class ExampleSuite{\r\n       static public Test suite() {\r\n         TestSuite suite= new TestSuite();\r\n         suite.addTestSuite(ExampleTest.class);\r\n         return suite;\r\n       }\r\n      }\t\t\r\n      public static class ExampleTest extends TestCase {\r\n       public void test1() {}\r\n      }\r\n     \r\n    \r\n\r\n\r\nThe pull request contains a test for each issue, and a proposed fix for\r\n`JUnit38ClassRunner`. Again the changes reflect my expectations of the\r\nfiltering behavior, please correct me if the other behavior is intended."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/193",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/193/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/193/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/193/events",
  "html_url" : "https://github.com/junit-team/junit/issues/193",
  "id" : 606464,
  "number" : 193,
  "title" : "Allow explicit ordering of Rules",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 12,
  "created_at" : "2011-02-17T13:26:13Z",
  "updated_at" : "2011-09-14T20:18:20Z",
  "closed_at" : "2011-09-14T20:18:20Z",
  "body" : "Some test cases have multiple rules, and the meaning of the test case changes based on the ordering of the rules.  Currently, a user can work around this by creating a custom rule that applies the rules in the desired order.  However, support in the core jar would make this simpler.  It's a little tricky to figure out what the simplest, most informative API for this would be.  Among the options:\r\n\r\n@Rule rulesInOrder = new RulesAppliedInOrder(innermostRule, middleRule, outerRule);\r\n@Rule rulesInOrder = Rules.firstControl(outerRule).around(middleRule).around(innermostRule);\r\n\r\nI'm in love with neither"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/194",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/194/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/194/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/194/events",
  "html_url" : "https://github.com/junit-team/junit/issues/194",
  "id" : 624326,
  "number" : 194,
  "title" : "All JUnit annotations should be able to be applied as meta-annotations",
  "user" : {
    "login" : "nealeu",
    "id" : 264594,
    "avatar_url" : "https://avatars.githubusercontent.com/u/264594?",
    "gravatar_id" : "64092f27b5c4d4dcb844fac496b4e71d",
    "url" : "https://api.github.com/users/nealeu",
    "html_url" : "https://github.com/nealeu",
    "followers_url" : "https://api.github.com/users/nealeu/followers",
    "following_url" : "https://api.github.com/users/nealeu/following{/other_user}",
    "gists_url" : "https://api.github.com/users/nealeu/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/nealeu/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/nealeu/subscriptions",
    "organizations_url" : "https://api.github.com/users/nealeu/orgs",
    "repos_url" : "https://api.github.com/users/nealeu/repos",
    "events_url" : "https://api.github.com/users/nealeu/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/nealeu/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 14,
  "created_at" : "2011-02-24T16:18:54Z",
  "updated_at" : "2013-05-24T15:30:41Z",
  "closed_at" : null,
  "body" : "As stated in https://github.com/KentBeck/junit/issues/100, it would enhance the DRYness and hence maintainability and readability of JUnit tests if `@RunWith(SomeCustomRunner.class)` could be specified in a single place, alongside other annotations to form testing meta-annotations.\n\nAt the moment it is suggested that `SpringJUnit4Runner` should be a `@Rule` (which has become the subject of issue 100), yet this migration would still require the repetition of:\n\n    @Rule @ClassRule \n    public static TestRule springRule = new SpringContextRule();\n\nAt class level, and example would be `@IntegrationTestSuite` (which could contain custom `@RunWith` and/or `@Rule` (assuming https://github.com/KentBeck/junit/issues/#issue/32 is implemented).\n\nAt test level, allowing `@Test` to be on a meta annotation would allow standard timeouts to be declared, such as a meta-annotation `@PerformanceCriticalReadOnlyTest` with the annotations `@Test(timeout=100) @Transactional(readOnly=true)`\n\n\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/195",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/195/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/195/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/195/events",
  "html_url" : "https://github.com/junit-team/junit/pull/195",
  "id" : 624411,
  "number" : 195,
  "title" : "Enhanced rules",
  "user" : {
    "login" : "nealeu",
    "id" : 264594,
    "avatar_url" : "https://avatars.githubusercontent.com/u/264594?",
    "gravatar_id" : "64092f27b5c4d4dcb844fac496b4e71d",
    "url" : "https://api.github.com/users/nealeu",
    "html_url" : "https://github.com/nealeu",
    "followers_url" : "https://api.github.com/users/nealeu/followers",
    "following_url" : "https://api.github.com/users/nealeu/following{/other_user}",
    "gists_url" : "https://api.github.com/users/nealeu/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/nealeu/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/nealeu/subscriptions",
    "organizations_url" : "https://api.github.com/users/nealeu/orgs",
    "repos_url" : "https://api.github.com/users/nealeu/repos",
    "events_url" : "https://api.github.com/users/nealeu/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/nealeu/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2011-02-24T16:51:26Z",
  "updated_at" : "2011-06-24T18:45:51Z",
  "closed_at" : "2011-06-24T18:45:51Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/195",
    "html_url" : "https://github.com/junit-team/junit/pull/195",
    "diff_url" : "https://github.com/junit-team/junit/pull/195.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/195.patch"
  },
  "body" : "Adds `Object target` to `TestRule.apply()` and `Method getMethod()` to `Description` to support the replacement of custom runners with rules, e.g. for SpringJUnit4ClassRunner."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/196",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/196/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/196/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/196/events",
  "html_url" : "https://github.com/junit-team/junit/pull/196",
  "id" : 626826,
  "number" : 196,
  "title" : "Meta annotations",
  "user" : {
    "login" : "nealeu",
    "id" : 264594,
    "avatar_url" : "https://avatars.githubusercontent.com/u/264594?",
    "gravatar_id" : "64092f27b5c4d4dcb844fac496b4e71d",
    "url" : "https://api.github.com/users/nealeu",
    "html_url" : "https://github.com/nealeu",
    "followers_url" : "https://api.github.com/users/nealeu/followers",
    "following_url" : "https://api.github.com/users/nealeu/following{/other_user}",
    "gists_url" : "https://api.github.com/users/nealeu/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/nealeu/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/nealeu/subscriptions",
    "organizations_url" : "https://api.github.com/users/nealeu/orgs",
    "repos_url" : "https://api.github.com/users/nealeu/repos",
    "events_url" : "https://api.github.com/users/nealeu/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/nealeu/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2011-02-25T14:28:19Z",
  "updated_at" : "2011-06-24T18:44:17Z",
  "closed_at" : "2011-06-24T18:44:17Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/196",
    "html_url" : "https://github.com/junit-team/junit/pull/196",
    "diff_url" : "https://github.com/junit-team/junit/pull/196.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/196.patch"
  },
  "body" : "This patch adds support for @RunWith to be detected as a meta-annotation as per issue 194."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/197",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/197/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/197/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/197/events",
  "html_url" : "https://github.com/junit-team/junit/pull/197",
  "id" : 639304,
  "number" : 197,
  "title" : "Potential resolution for \"Theories doesn't honor parameterized types\"",
  "user" : {
    "login" : "pholser",
    "id" : 77261,
    "avatar_url" : "https://avatars.githubusercontent.com/u/77261?",
    "gravatar_id" : "2f1e1064ae4295d285234c59f5dcb541",
    "url" : "https://api.github.com/users/pholser",
    "html_url" : "https://github.com/pholser",
    "followers_url" : "https://api.github.com/users/pholser/followers",
    "following_url" : "https://api.github.com/users/pholser/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pholser/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pholser/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pholser/subscriptions",
    "organizations_url" : "https://api.github.com/users/pholser/orgs",
    "repos_url" : "https://api.github.com/users/pholser/repos",
    "events_url" : "https://api.github.com/users/pholser/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pholser/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 17,
  "created_at" : "2011-03-02T01:41:08Z",
  "updated_at" : "2011-03-09T16:29:27Z",
  "closed_at" : "2011-03-10T00:28:47Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/197",
    "html_url" : "https://github.com/junit-team/junit/pull/197",
    "diff_url" : "https://github.com/junit-team/junit/pull/197.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/197.patch"
  },
  "body" : "In response to the GitHub issue \"Theories doesn't honor parameterized types\" (https://github.com/KentBeck/junit/issues#issue/64), I've forked junit from GitHub and on that fork attempted to make parameterized type info available to the Theories runner.\r\n\r\nThe changes I made basically involve calling the getGeneric*() correspondents to methods like (Method|Constructor).getParameterTypes(), Method.getReturnType(), and Field.getType(), and dealing with the implications (e.g. FrameworkMethod#producesType() now takes a java.lang.reflect.Type rather than a Class<?>).\r\n\r\nChanging from Class<?> to Type also means that we have to find suitable replacements for niceties like Class.isArray(), Class.getComponentType(), and Class.isAssignableFrom(). Enter javaRuntype (http://javaruntype.com). After using it a bit and looking at its tests, I'm thinking it could allow the Theories runner and its dependencies to do things with java.lang.reflect.Types that it previously would do with Classes.\r\n\r\nI had to change org.junit.tests.assertion.BothTest so that the generics declarations allowed the theory parameter matching to work. I also marked a couple of tests as @Ignore:\r\n\r\n  -- org.junit.tests.experimental.MatcherTest#differentMatchersHaveDifferentDescriptions()\r\n  -- org.junit.tests.experimental.theories.runner.WhenNoParametersMatch#showFailedAssumptionsWhenNoParametersFound()\r\n\r\nI couldn't find a way to adjust them so that both theory parameter matching would find matches and the code would compile successfully. 8^(\r\n\r\nI've not sussed out the issues of bundling javaRuntype and its dependencies into JUnit.\r\n\r\nLet me know if you have questions regarding these changes. Thanks!"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/198",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/198/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/198/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/198/events",
  "html_url" : "https://github.com/junit-team/junit/issues/198",
  "id" : 655844,
  "number" : 198,
  "title" : "Add @JavaTestMethod and @JavaTestClass annotations to Description when they are known by built-in runners",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/descriptions",
    "name" : "descriptions",
    "color" : "009800"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 28,
  "created_at" : "2011-03-08T14:04:37Z",
  "updated_at" : "2014-04-27T08:21:16Z",
  "closed_at" : null,
  "body" : "Description currently has methods getTestClass, getClassName, and getMethodName.  These are lame implementations that depend on parsing information out of the description string that either (1) were already known at the time the Description was created, or (2) aren't there, because the Description doesn't refer to a Java code element at all.\r\n\r\nThere have been proposals (for example, in https://github.com/KentBeck/junit/pull/195) to further enrich this API with getTestMethod, etc.  Instead, let's deprecate this way of doing things, and instead augment the implementation of the built-in Runners and classes that touch Java classes, so that they use the existing Annotation-based metadata mechanism on Description.  Thus, for example, to get the Java class associated with a Description, one would use\r\n\r\nClass<?> testClass = myDescription.getAnnotation(JavaTestClass.class).getValue();\r\n\r\nWe could then either deprecate the old Java-reflection-specific methods on Description, or port them over to use the new, clean Annotation implementation."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/199",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/199/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/199/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/199/events",
  "html_url" : "https://github.com/junit-team/junit/issues/199",
  "id" : 655911,
  "number" : 199,
  "title" : "@BuildRule",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 27,
  "created_at" : "2011-03-08T14:38:23Z",
  "updated_at" : "2013-10-17T00:55:40Z",
  "closed_at" : "2013-10-17T00:55:40Z",
  "body" : "Extenders are excited about the possibilities of Rules.  However, there is still room for an extension point between the \"throw everything away and replace it\" capability given by @RunWith, and the limited, though powerful behavior-per-method decoration provided by Rule.  Among the remaining gaps:\n\n1. Runners like Parameterized, Theories, SpringJUnit4ClassRunner are powerful, but cannot be combined with each other custom runners.\n2. There is no easy single-line extension to add rules to both the class-level context (@ClassRule) and method-level context (@Rule) simultaneously.\n3. There is no easy way for multiple Rules to apply at different points in the built-in wrapper chain (for example, one might want to happen \"inside\" the Before/After wrappers, and another \"outside\").\n\nThere have been several proposals to further enhance the TestRule interface to make up for some of these gaps.  However, I think it's best to leave the TestRule interface simple, so that a single TestRule implementation can be applied to many different situations.  For example, one might want an ExternalResource to be set up and torn down around an entire class, or around a test method, or around a group of parameters, or around a single theory application, or...\n\nRather than extending the @Rule/@ClassRule/TestRule mechanism directly, I recommend a new extension mechanism.  While names may change, I currently think of this mechanism being invoked by a new annotation @BuildRule.  Imagine the following:\n\n    @BuildRule public static BlockBuildRule rule = new MyBlockBuildRule();\n\nMyBlockBuildRule must implement:\n\n    interface BlockBuildRule {\n      public RuleChainer buildClassRules(Class<?> testClass, RuleChainer base);\n      public RuleChainer buildMethodRules(Object target, RuleChainer base);\n    }\n\nWhere RuleChainer is:\n\n    interface RuleChainer {\n      public List<TestRule> getRules();\n    }\n\nThe interfaces proposed might change, or be combined.  We also might consider making BlockBuildRule an abstract class, so that future extension points could be added without breaking extenders.\n\nThis change would also introduce a base RuleChainer for BlockJUnit4ClassRunner, which would return Rules representing the basic built-in wrapper chain (which would need to be re-expressed as rules, per https://github.com/KentBeck/junit/issues/204):\n\n[ExpectingExceptions, PotentialTimeout, WithBefores, WithAfters, WithRules]\n\nAnd for ParentRunner:\n\n[WithBeforeClasses, WithAfterClasses, WithClassRules]\n\nThis would allow BlockBuildRules to insert, re-order, delete, etc. these built-in wrappers.\n\n[edited for formatting]\n[added information on base RuleChainers]\n[added link to https://github.com/KentBeck/junit/issues/204]"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/200",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/200/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/200/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/200/events",
  "html_url" : "https://github.com/junit-team/junit/issues/200",
  "id" : 655943,
  "number" : 200,
  "title" : "@Rules annotation at class level",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 11,
  "created_at" : "2011-03-08T14:46:22Z",
  "updated_at" : "2014-01-29T06:09:46Z",
  "closed_at" : null,
  "body" : "[text extracted from AlistairIsrael's https://github.com/KentBeck/junit/issues/32]\nMerely voicing out an idea here that came to mind as I've been using @Rules. I'd like to put it in here just for the record, but if you guys have a better idea for the direction @Rules should go I'd be happy to go with that.\n\nCurrently, to use a rule the test class has to declare and instantiate the Rule object, like so:\n\n        @Rule\n        public MagicMocker magicMocker = new MagicMocker();\n\nBasically, I can see myself, and others, coming up with quite a few rules that the test itself doesn't interact with (and that have default constructors).\n\nMy idea is to let the test simply declare any such rules, using another annotation, and have JUnit take care of instantiation.\n\nJUnit already instantiates the test classes themselves, so I don't see why it can't instantiate other things. JUnit also already provides class-level annotations that affect test behavior (@RunWith) so I think whole the idea isn't entirely foreign to JUnit.\n\nFor example,\n\n    @Rules({TestPersistenceContext.class, FixturesLoader.class})\n    public class DaoTest {\n    \n\nIn the above, JUnit could take care of instantiating, then applying the rules that set up the test database and load data fixtures. The FixturesLoader.class could be a MethodRule that gets applied to all test methods. The resulting test code is more concise and less cluttered with rules/fixture setup."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/201",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/201/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/201/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/201/events",
  "html_url" : "https://github.com/junit-team/junit/issues/201",
  "id" : 655951,
  "number" : 201,
  "title" : "@Rules annotation at method level",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2011-03-08T14:48:21Z",
  "updated_at" : "2013-06-20T17:15:15Z",
  "closed_at" : "2013-06-20T17:15:15Z",
  "body" : "[text extracted from AlistairIsrael's https://github.com/KentBeck/junit/issues/32]\r\n\r\nA further refinement would be to allow @Rules to selectively applied to methods. A contrived example:\r\n    \r\n        @Test\r\n        @Rules(ExpectedSqlException.class)\r\n        public void shouldThrowSqlException() {\r\n            ....\r\n    \r\nIn the above case, the ExpectedSqlException rule will only be instantiated and applied to that particular test method. All other test methods will only have the @Rules declared at the class-level.\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/202",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/202/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/202/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/202/events",
  "html_url" : "https://github.com/junit-team/junit/issues/202",
  "id" : 656722,
  "number" : 202,
  "title" : "@RunWith(MetaAnnotations.class)",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2011-03-08T19:03:47Z",
  "updated_at" : "2014-01-29T06:00:45Z",
  "closed_at" : null,
  "body" : "Issue #194 suggests treating all annotations as meta-annotations.\r\n\r\nWhile discussions about the relative costs and benefits of that proposal continue, there should be a way (in junit or junit.contrib) for a test developer to \"opt-in\" to meta-annotations.  The obvious thing to try is using a custom runner:\r\n\r\n    @RunWith(MetaAnnotations.class)\r\n    @MetaAnnotationForClass\r\n    public class TestClass {\r\n       @MetaAnnotationOnMethod public void foo();\r\n    }\r\n\r\nMaking this work will likely require some method extraction on BlockJUnit4ClassRunner.  MetaAnnotations could override getAnnotatedMethods, but statements like \r\n    \r\n    method.getAnnotation(Ignore.class) != null\r\n\r\nWould need to be changed to call a protected method:\r\n\r\n     getAnnotation(method, Ignore.class) != null\r\n\r\nSo that MetaAnnotations could override getAnnotation."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/203",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/203/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/203/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/203/events",
  "html_url" : "https://github.com/junit-team/junit/pull/203",
  "id" : 659687,
  "number" : 203,
  "title" : "Automate building of Maven artifacts",
  "user" : {
    "login" : "twoqubed",
    "id" : 57248,
    "avatar_url" : "https://avatars.githubusercontent.com/u/57248?",
    "gravatar_id" : "e0d4fd3895e4f98f7252b0ff2525074d",
    "url" : "https://api.github.com/users/twoqubed",
    "html_url" : "https://github.com/twoqubed",
    "followers_url" : "https://api.github.com/users/twoqubed/followers",
    "following_url" : "https://api.github.com/users/twoqubed/following{/other_user}",
    "gists_url" : "https://api.github.com/users/twoqubed/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/twoqubed/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/twoqubed/subscriptions",
    "organizations_url" : "https://api.github.com/users/twoqubed/orgs",
    "repos_url" : "https://api.github.com/users/twoqubed/repos",
    "events_url" : "https://api.github.com/users/twoqubed/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/twoqubed/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/pull",
    "name" : "pull",
    "color" : "858585"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2011-03-09T17:33:34Z",
  "updated_at" : "2011-06-24T19:02:45Z",
  "closed_at" : "2011-06-24T18:42:46Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/203",
    "html_url" : "https://github.com/junit-team/junit/pull/203",
    "diff_url" : "https://github.com/junit-team/junit/pull/203.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/203.patch"
  },
  "body" : "I added a script to automate the building of Maven artifacts and bundling them so that they are ready to be pushed to the Maven central repository.\r\n\r\nThe bulk of the work is done in a new script named prepared-maven.sh. This script derives the Maven artifacts entirely from the artifacts produced by the Ant build. It bundles a binary JAR, a source JAR, and a javadoc JAR, as well as a POM file into a single JAR file. There is a single bundle JAR file for both junit-xxx and junit-dep-xxx. The archives contained within these bundles follow the same Maven structure as today (i.e. no new groupId/artifactId was introduced and the junit-xxx artifact still contains the hamcrest classes).\r\n\r\nOne thing to consider... in order to produce this Maven bundle, all artifacts must be signed. So, for now this script assumes the user has GPG installed locally and `gpg` is in the users `PATH`.\r\n\r\nI also integrated this script into the existing Ant build via the new target `prepare.maven`.\r\n\r\nThe final change I made was to rename *pom.xml* to *pom-template.xml* to remove any confusion as to the purpose of this file. Having a pom.xml at the root of the project could indicate JUnit is build with Maven, when it is actually completely built with Ant."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/204",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/204/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/204/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/204/events",
  "html_url" : "https://github.com/junit-team/junit/issues/204",
  "id" : 665619,
  "number" : 204,
  "title" : "Express built-in wrappers as Rules",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/rules",
    "name" : "rules",
    "color" : "0b02e1"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2011-03-11T16:10:10Z",
  "updated_at" : "2013-05-30T14:13:49Z",
  "closed_at" : "2013-05-30T14:13:49Z",
  "body" : "JUnit currently has several built-in functionality wrappers.  At the method level, there's\r\n\r\n[ExpectingExceptions, PotentialTimeout, WithBefores, WithAfters, WithRules]\r\n\r\nAnd at the class level:\r\n\r\n[WithBeforeClasses, WithAfterClasses, WithClassRules]\r\n\r\nExtracting these as explicit named Rules would potentially be useful to people writing custom runners and rules, and is a necessary enabling step for https://github.com/KentBeck/junit/issues/199."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/205",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/205/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/205/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/205/events",
  "html_url" : "https://github.com/junit-team/junit/pull/205",
  "id" : 666810,
  "number" : 205,
  "title" : "Potential Resolution for issue 64, theories honoring generic parameter types",
  "user" : {
    "login" : "pholser",
    "id" : 77261,
    "avatar_url" : "https://avatars.githubusercontent.com/u/77261?",
    "gravatar_id" : "2f1e1064ae4295d285234c59f5dcb541",
    "url" : "https://api.github.com/users/pholser",
    "html_url" : "https://github.com/pholser",
    "followers_url" : "https://api.github.com/users/pholser/followers",
    "following_url" : "https://api.github.com/users/pholser/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pholser/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pholser/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pholser/subscriptions",
    "organizations_url" : "https://api.github.com/users/pholser/orgs",
    "repos_url" : "https://api.github.com/users/pholser/repos",
    "events_url" : "https://api.github.com/users/pholser/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pholser/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/pull",
    "name" : "pull",
    "color" : "858585"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 13,
  "created_at" : "2011-03-11T23:29:43Z",
  "updated_at" : "2011-06-24T18:43:08Z",
  "closed_at" : "2011-06-24T18:43:08Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/205",
    "html_url" : "https://github.com/junit-team/junit/pull/205",
    "diff_url" : "https://github.com/junit-team/junit/pull/205.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/205.patch"
  },
  "body" : "Might be more tests needed, but the theory in the original issue now passes, represented by test class MatchingGenericParameters."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/206",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/206/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/206/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/206/events",
  "html_url" : "https://github.com/junit-team/junit/issues/206",
  "id" : 681785,
  "number" : 206,
  "title" : "Please do not make various protected methods in BlockJUnit4ClassRunner private!",
  "user" : {
    "login" : "nlmarco",
    "id" : 675242,
    "avatar_url" : "https://avatars.githubusercontent.com/u/675242?",
    "gravatar_id" : "f49ad21c17c5ec27fd3261531827c2cb",
    "url" : "https://api.github.com/users/nlmarco",
    "html_url" : "https://github.com/nlmarco",
    "followers_url" : "https://api.github.com/users/nlmarco/followers",
    "following_url" : "https://api.github.com/users/nlmarco/following{/other_user}",
    "gists_url" : "https://api.github.com/users/nlmarco/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/nlmarco/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/nlmarco/subscriptions",
    "organizations_url" : "https://api.github.com/users/nlmarco/orgs",
    "repos_url" : "https://api.github.com/users/nlmarco/repos",
    "events_url" : "https://api.github.com/users/nlmarco/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/nlmarco/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2011-03-17T14:41:14Z",
  "updated_at" : "2013-05-30T16:48:34Z",
  "closed_at" : "2013-05-30T16:48:34Z",
  "body" : "Hello *,\r\n\r\nwe use jUnit for testing JDO-based data-models as well as DataNucleus-plug-ins. In order to simplify the tests, we use a special TransactionalRunner that executes every method inside a transaction and \"injects\" a transactional javax.jdo.PersistenceManager into the test (the test needs to implement an appropriate interface for this).\r\n\r\nThis works fine, but my approach overrides the methods withBefores(...) and with withAfters(...) in order to use a custom RunBefores subclass. However, the methods I override are marked '@deprecated Will be private soon: use Rules instead'. I'm sorry, but with rules alone, I cannot do what I want to do. I still can execute all 'befores' in one transaction, but not every single 'before' in an individual transaction anymore.\r\n\r\nOf course, I could still achieve the same by overriding methodBlock(...), but then I'd have to re-implement far more than now and as far as I understand, BlockJUnit4ClassRunner is made to be subclassed and thus make custom runners easier to implement.\r\n\r\nTherefore: Please do not make these withXXX(...) methods private, but instead remove the @deprecated mark.\r\n\r\nBest regards, Marco :-)"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/207",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/207/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/207/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/207/events",
  "html_url" : "https://github.com/junit-team/junit/pull/207",
  "id" : 683389,
  "number" : 207,
  "title" : "Make results serializable",
  "user" : {
    "login" : "rojotek",
    "id" : 261271,
    "avatar_url" : "https://avatars.githubusercontent.com/u/261271?",
    "gravatar_id" : "b3e9e3c5a34016519021b9a224abe612",
    "url" : "https://api.github.com/users/rojotek",
    "html_url" : "https://github.com/rojotek",
    "followers_url" : "https://api.github.com/users/rojotek/followers",
    "following_url" : "https://api.github.com/users/rojotek/following{/other_user}",
    "gists_url" : "https://api.github.com/users/rojotek/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/rojotek/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/rojotek/subscriptions",
    "organizations_url" : "https://api.github.com/users/rojotek/orgs",
    "repos_url" : "https://api.github.com/users/rojotek/repos",
    "events_url" : "https://api.github.com/users/rojotek/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/rojotek/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/pull",
    "name" : "pull",
    "color" : "858585"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 15,
  "created_at" : "2011-03-18T00:04:06Z",
  "updated_at" : "2012-01-29T03:34:15Z",
  "closed_at" : "2012-01-29T03:34:15Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/207",
    "html_url" : "https://github.com/junit-team/junit/pull/207",
    "diff_url" : "https://github.com/junit-team/junit/pull/207.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/207.patch"
  },
  "body" : "Fix for bug https://github.com/KentBeck/junit/issues/101#issue/101"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/208",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/208/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/208/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/208/events",
  "html_url" : "https://github.com/junit-team/junit/issues/208",
  "id" : 701414,
  "number" : 208,
  "title" : "Javadoc error in JUnitMatchers.either",
  "user" : {
    "login" : "ububenheimer",
    "id" : 688759,
    "avatar_url" : "https://avatars.githubusercontent.com/u/688759?",
    "gravatar_id" : "53e42bcb060790228140dfbc6dda1d28",
    "url" : "https://api.github.com/users/ububenheimer",
    "html_url" : "https://github.com/ububenheimer",
    "followers_url" : "https://api.github.com/users/ububenheimer/followers",
    "following_url" : "https://api.github.com/users/ububenheimer/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ububenheimer/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ububenheimer/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ububenheimer/subscriptions",
    "organizations_url" : "https://api.github.com/users/ububenheimer/orgs",
    "repos_url" : "https://api.github.com/users/ububenheimer/repos",
    "events_url" : "https://api.github.com/users/ububenheimer/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ububenheimer/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/regression",
    "name" : "regression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2011-03-24T17:32:03Z",
  "updated_at" : "2011-04-15T19:43:25Z",
  "closed_at" : "2011-04-15T19:43:25Z",
  "body" : "The Javadoc for the JUnitMatchers.either() is obviously wrong; copy/paste error in the sample code:\r\n\r\n    This is useful for fluently combining matchers where either may pass, for example:\r\n\r\n       assertThat(string, both(containsString(\"a\")).and(containsString(\"b\")));\r\n     "
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/209",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/209/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/209/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/209/events",
  "html_url" : "https://github.com/junit-team/junit/issues/209",
  "id" : 713868,
  "number" : 209,
  "title" : "Removing through iterator not supported by CopyOnWriteArrayList",
  "user" : {
    "login" : "krosenvold",
    "id" : 67744,
    "avatar_url" : "https://avatars.githubusercontent.com/u/67744?",
    "gravatar_id" : "48ad44fb319fc06a737a082820bff3ea",
    "url" : "https://api.github.com/users/krosenvold",
    "html_url" : "https://github.com/krosenvold",
    "followers_url" : "https://api.github.com/users/krosenvold/followers",
    "following_url" : "https://api.github.com/users/krosenvold/following{/other_user}",
    "gists_url" : "https://api.github.com/users/krosenvold/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/krosenvold/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/krosenvold/subscriptions",
    "organizations_url" : "https://api.github.com/users/krosenvold/orgs",
    "repos_url" : "https://api.github.com/users/krosenvold/repos",
    "events_url" : "https://api.github.com/users/krosenvold/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/krosenvold/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/bug",
    "name" : "bug",
    "color" : "ff0000"
  }, {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/nonregression",
    "name" : "nonregression",
    "color" : "ededed"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2011-03-29T11:19:43Z",
  "updated_at" : "2012-04-06T20:42:06Z",
  "closed_at" : "2012-04-06T20:42:06Z",
  "body" : "Run-listener throwing exception causes this, and it can be seen that removing an element by its iterator is not suppored on copyonwritearraylist.\r\n\r\n\r\nCaused by: java.lang.IllegalStateException\r\n        at java.util.AbstractList$Itr.remove(AbstractList.java:356)\r\n        at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:43)\r\n        at org.junit.runner.notification.RunNotifier.fireTestRunFinished(RunNotifier.java:68)\r\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:158)\r\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:136)\r\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:127)\r\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:51)\r\n        at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:110)\r\n\r\n\r\nFix with the following change or similar:\r\n            for (Iterator<RunListener> all = fListeners.iterator(); all.hasNext();){\r\n                RunListener next = all.next();\r\n                try {\r\n                    notifyListener(next);\r\n                } catch (Exception e) {\r\n                    fListeners.remove( next); // Remove the offending listener first to avoid an infinite loop\r\n                    fireTestFailure(new Failure(Description.TEST_MECHANISM, e));\r\n                }\r\n            }\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/210",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/210/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/210/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/210/events",
  "html_url" : "https://github.com/junit-team/junit/issues/210",
  "id" : 714030,
  "number" : 210,
  "title" : "Untitled",
  "user" : {
    "login" : "coderiders",
    "id" : 611974,
    "avatar_url" : "https://avatars.githubusercontent.com/u/611974?",
    "gravatar_id" : "bf267d8d8c89a84739f29f270b3a1aa0",
    "url" : "https://api.github.com/users/coderiders",
    "html_url" : "https://github.com/coderiders",
    "followers_url" : "https://api.github.com/users/coderiders/followers",
    "following_url" : "https://api.github.com/users/coderiders/following{/other_user}",
    "gists_url" : "https://api.github.com/users/coderiders/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/coderiders/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/coderiders/subscriptions",
    "organizations_url" : "https://api.github.com/users/coderiders/orgs",
    "repos_url" : "https://api.github.com/users/coderiders/repos",
    "events_url" : "https://api.github.com/users/coderiders/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/coderiders/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2011-03-29T12:38:07Z",
  "updated_at" : "2011-03-29T12:38:31Z",
  "closed_at" : "2011-03-29T12:38:31Z",
  "body" : ""
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/211",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/211/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/211/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/211/events",
  "html_url" : "https://github.com/junit-team/junit/issues/211",
  "id" : 714039,
  "number" : 211,
  "title" : "Allow @Before/@After to accept datapoints",
  "user" : {
    "login" : "dwijnand",
    "id" : 344610,
    "avatar_url" : "https://avatars.githubusercontent.com/u/344610?",
    "gravatar_id" : "e6a9e22d8a3b247fa35817653909e041",
    "url" : "https://api.github.com/users/dwijnand",
    "html_url" : "https://github.com/dwijnand",
    "followers_url" : "https://api.github.com/users/dwijnand/followers",
    "following_url" : "https://api.github.com/users/dwijnand/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dwijnand/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dwijnand/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dwijnand/subscriptions",
    "organizations_url" : "https://api.github.com/users/dwijnand/orgs",
    "repos_url" : "https://api.github.com/users/dwijnand/repos",
    "events_url" : "https://api.github.com/users/dwijnand/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dwijnand/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/feature",
    "name" : "feature",
    "color" : "3b7d2e"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2011-03-29T12:41:39Z",
  "updated_at" : "2012-10-04T18:29:57Z",
  "closed_at" : null,
  "body" : "My test class (which runs with Theories) has to check orthogonal assertions. It would be convenient for me to be able to capture the datapoints (in my case one) in @Before and @After methods to verify these assertions."
} ]