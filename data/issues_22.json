[ {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/666",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/666/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/666/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/666/events",
  "html_url" : "https://github.com/junit-team/junit/pull/666",
  "id" : 13094835,
  "number" : 666,
  "title" : "Treatments for parallel execution",
  "user" : {
    "login" : "Tibor17",
    "id" : 1045063,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1045063?",
    "gravatar_id" : "e5db3e98a858066748db3f817be7bc01",
    "url" : "https://api.github.com/users/Tibor17",
    "html_url" : "https://github.com/Tibor17",
    "followers_url" : "https://api.github.com/users/Tibor17/followers",
    "following_url" : "https://api.github.com/users/Tibor17/following{/other_user}",
    "gists_url" : "https://api.github.com/users/Tibor17/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/Tibor17/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/Tibor17/subscriptions",
    "organizations_url" : "https://api.github.com/users/Tibor17/orgs",
    "repos_url" : "https://api.github.com/users/Tibor17/repos",
    "events_url" : "https://api.github.com/users/Tibor17/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/Tibor17/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 26,
  "created_at" : "2013-04-11T23:19:44Z",
  "updated_at" : "2013-07-09T00:00:33Z",
  "closed_at" : "2013-07-09T00:00:26Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/666",
    "html_url" : "https://github.com/junit-team/junit/pull/666",
    "diff_url" : "https://github.com/junit-team/junit/pull/666.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/666.patch"
  },
  "body" : "In parallel execution, the objects like runners, Description, TestClass are created in main Thread and used in forked Thread. This will treat the multithreaded visibility.\r\n\r\nAdded final field modifier in:\r\nAnnotatedBuilder, Parameterized, TestClass\r\n\r\nAdded volatile field modifier in:\r\nClassRequest, JUnit38ClassRunner, Description, ParentRunner\r\n\r\nDescription: ArrayList replaced with ConcurrentLinkedQueue used out of the class\r\nDescrioption#getChildren() returns backed ArrayList since it returns ArrayList and not List. It is not modified from outside.\r\n\r\nParameterized: ArrayList of runners replaced with CopyOnWriteArrayList\r\n\r\nParentRunner: ArrayList of fFilteredChildren replaced with ConcurrentLinkedQueue\r\nThe Collections.sort() uses ListIterator#set() which is unsupported in CopyOnWriteArrayList\r\nRemovals on fFilteredChildren are not concurrent.\r\n\r\nSuite: backed fRunners with CopyOnWriteArrayList\r\n\r\nTestClass: replaced only collections which are used out of the class\r\nHashMap replaced with ConcurrentHashMap\r\nArrayList replaced with CopyOnWriteArrayList"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/667",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/667/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/667/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/667/events",
  "html_url" : "https://github.com/junit-team/junit/issues/667",
  "id" : 13140584,
  "number" : 667,
  "title" : "Classpath use seems to be broken in junit ant task?",
  "user" : {
    "login" : "andrewcooke",
    "id" : 1429281,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1429281?",
    "gravatar_id" : "03d9445ceed1c27bc651479a9dc2beae",
    "url" : "https://api.github.com/users/andrewcooke",
    "html_url" : "https://github.com/andrewcooke",
    "followers_url" : "https://api.github.com/users/andrewcooke/followers",
    "following_url" : "https://api.github.com/users/andrewcooke/following{/other_user}",
    "gists_url" : "https://api.github.com/users/andrewcooke/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/andrewcooke/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/andrewcooke/subscriptions",
    "organizations_url" : "https://api.github.com/users/andrewcooke/orgs",
    "repos_url" : "https://api.github.com/users/andrewcooke/repos",
    "events_url" : "https://api.github.com/users/andrewcooke/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/andrewcooke/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2013-04-12T21:37:31Z",
  "updated_at" : "2013-04-12T22:02:39Z",
  "closed_at" : "2013-04-12T21:45:22Z",
  "body" : "At http://ant.apache.org/manual/Tasks/junit.html item 5 near the top of the page suggests that the junit task in ant should work if the jar is provided by classpath.\r\n\r\nHowever, the issue described in detail at http://stackoverflow.com/questions/15979391/class-not-found-with-ant-ivy-and-junit-error-in-build-xml seems to show that is not the case - there is a class not found error even when the classpath is set correctly.\r\n\r\nThe code for the project can be downloaded from https://bitbucket.org/isti/java-example\r\n\r\nSo to reproduce:\r\n\r\n    hg clone ssh://hg@bitbucket.org/isti/java-example\r\n    cd java-example\r\n    ant test\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/668",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/668/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/668/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/668/events",
  "html_url" : "https://github.com/junit-team/junit/pull/668",
  "id" : 13645842,
  "number" : 668,
  "title" : "system-property configured global rule activation",
  "user" : {
    "login" : "gaffa",
    "id" : 904804,
    "avatar_url" : "https://avatars.githubusercontent.com/u/904804?",
    "gravatar_id" : "16f356770553e7b01173e89850f5f7ac",
    "url" : "https://api.github.com/users/gaffa",
    "html_url" : "https://github.com/gaffa",
    "followers_url" : "https://api.github.com/users/gaffa/followers",
    "following_url" : "https://api.github.com/users/gaffa/following{/other_user}",
    "gists_url" : "https://api.github.com/users/gaffa/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/gaffa/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/gaffa/subscriptions",
    "organizations_url" : "https://api.github.com/users/gaffa/orgs",
    "repos_url" : "https://api.github.com/users/gaffa/repos",
    "events_url" : "https://api.github.com/users/gaffa/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/gaffa/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 10,
  "created_at" : "2013-04-25T15:52:52Z",
  "updated_at" : "2013-09-06T20:50:11Z",
  "closed_at" : "2013-09-06T20:50:11Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/668",
    "html_url" : "https://github.com/junit-team/junit/pull/668",
    "diff_url" : "https://github.com/junit-team/junit/pull/668.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/668.patch"
  },
  "body" : "Hi folks!\r\nWe need to activate a rule globally based on surefire-argline. Its no option to annotate all classes with @Rule as there are just to many and also we only want the rule to be used in certain jenkins jobs. This is a first approch. Please note that:\r\n\r\n- I did not know what to do with the exceptions in this case\r\n- I did not know where to put the property-identifying string\r\n- I did forget some of the formatting rules in junit\r\n\r\nI would love to get your help to make this pull request mergeable. I searched around the net and found quite some people searching for a solution like this.\r\n\r\nOf course there are drawbacks. As if the users want to use a Rule like Timeout (which needs constructor-args) they need to extend that rule, grab the parameters somewhere and call super() with those params. But I think most people can live with that."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/669",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/669/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/669/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/669/events",
  "html_url" : "https://github.com/junit-team/junit/issues/669",
  "id" : 13660310,
  "number" : 669,
  "title" : "Cutting on stack call",
  "user" : {
    "login" : "stanl3y",
    "id" : 2943662,
    "avatar_url" : "https://avatars.githubusercontent.com/u/2943662?",
    "gravatar_id" : "a99ef30bb0519843c39e7d90109527d8",
    "url" : "https://api.github.com/users/stanl3y",
    "html_url" : "https://github.com/stanl3y",
    "followers_url" : "https://api.github.com/users/stanl3y/followers",
    "following_url" : "https://api.github.com/users/stanl3y/following{/other_user}",
    "gists_url" : "https://api.github.com/users/stanl3y/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/stanl3y/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/stanl3y/subscriptions",
    "organizations_url" : "https://api.github.com/users/stanl3y/orgs",
    "repos_url" : "https://api.github.com/users/stanl3y/repos",
    "events_url" : "https://api.github.com/users/stanl3y/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/stanl3y/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2013-04-25T20:40:02Z",
  "updated_at" : "2014-01-29T06:59:39Z",
  "closed_at" : null,
  "body" : "This is what I get when I try to run my tests in terminal. Is it possible to cut the stack call to say, three or four lines from the top ?\r\n\r\nThere was 1 failure:\r\n1) matrixToString(GeneralMatrixTest)\r\norg.junit.ComparisonFailure: expected:<[1.000 \r\n2.000 ]> but was:<[ 1.000\r\n 2.000\r\n]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n\tat org.junit.Assert.assertEquals(Assert.java:144)\r\n\tat GeneralMatrixTest.matrixToString(GeneralMatrixTest.java:52)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:616)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:168)\r\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\r\n\tat org.junit.runners.Suite.runChild(Suite.java:127)\r\n\tat org.junit.runners.Suite.runChild(Suite.java:26)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:138)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:117)\r\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:96)\r\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\r\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:40)\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/670",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/670/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/670/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/670/events",
  "html_url" : "https://github.com/junit-team/junit/issues/670",
  "id" : 13889747,
  "number" : 670,
  "title" : "JUnit should process annoations in package-info.java",
  "user" : {
    "login" : "brianegge",
    "id" : 175930,
    "avatar_url" : "https://avatars.githubusercontent.com/u/175930?",
    "gravatar_id" : "f221969d01bf7d2a0707c85897d84ec5",
    "url" : "https://api.github.com/users/brianegge",
    "html_url" : "https://github.com/brianegge",
    "followers_url" : "https://api.github.com/users/brianegge/followers",
    "following_url" : "https://api.github.com/users/brianegge/following{/other_user}",
    "gists_url" : "https://api.github.com/users/brianegge/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/brianegge/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/brianegge/subscriptions",
    "organizations_url" : "https://api.github.com/users/brianegge/orgs",
    "repos_url" : "https://api.github.com/users/brianegge/repos",
    "events_url" : "https://api.github.com/users/brianegge/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/brianegge/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 15,
  "created_at" : "2013-05-02T12:53:21Z",
  "updated_at" : "2014-01-29T22:43:34Z",
  "closed_at" : null,
  "body" : "It would be useful to be able to add package level annotations to package-info.java. For example adding @org.junit.Ignore to the package should ignore all tests in that package."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/671",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/671/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/671/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/671/events",
  "html_url" : "https://github.com/junit-team/junit/issues/671",
  "id" : 13897831,
  "number" : 671,
  "title" : "@Parameters method is executed before @ClassRule initialization. Could it be the way around?",
  "user" : {
    "login" : "javornikolov",
    "id" : 203471,
    "avatar_url" : "https://avatars.githubusercontent.com/u/203471?",
    "gravatar_id" : "d5935dc6e89bb3be00fbae0eed0118ae",
    "url" : "https://api.github.com/users/javornikolov",
    "html_url" : "https://github.com/javornikolov",
    "followers_url" : "https://api.github.com/users/javornikolov/followers",
    "following_url" : "https://api.github.com/users/javornikolov/following{/other_user}",
    "gists_url" : "https://api.github.com/users/javornikolov/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/javornikolov/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/javornikolov/subscriptions",
    "organizations_url" : "https://api.github.com/users/javornikolov/orgs",
    "repos_url" : "https://api.github.com/users/javornikolov/repos",
    "events_url" : "https://api.github.com/users/javornikolov/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/javornikolov/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 9,
  "created_at" : "2013-05-02T16:01:15Z",
  "updated_at" : "2014-01-31T18:38:25Z",
  "closed_at" : null,
  "body" : "I have the following problem (using *junit 4.11*):\r\n\r\n```java\r\n    @ClassRule\r\n    public static TemporaryFolder tmp = new TemporaryFolder();\r\n    ...\r\n    @Parameters\r\n    public static Collection<Object[]> data() throws Exception {\r\n        return java.util.Arrays.asList(new Object[][] {\r\n            {0, tmp.getRoot().getPath()}\r\n        });\r\n    }\r\n```\r\n\r\nThis results in **initializationError**\r\n```\r\njava.lang.IllegalStateException: the temporary folder has not yet been created\r\n\tat org.junit.rules.TemporaryFolder.getRoot(TemporaryFolder.java:127)\r\n```\r\n\r\nSo seems the *@Parameters* method is executed before the *ClassRule* initialization phase which makes scenarios like above one a bit complicated."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/672",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/672/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/672/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/672/events",
  "html_url" : "https://github.com/junit-team/junit/issues/672",
  "id" : 13941741,
  "number" : 672,
  "title" : "Custom data for the result XML report",
  "user" : {
    "login" : "OndraZizka",
    "id" : 644904,
    "avatar_url" : "https://avatars.githubusercontent.com/u/644904?",
    "gravatar_id" : "d0edf9d0f312ec47d27046845580ba4f",
    "url" : "https://api.github.com/users/OndraZizka",
    "html_url" : "https://github.com/OndraZizka",
    "followers_url" : "https://api.github.com/users/OndraZizka/followers",
    "following_url" : "https://api.github.com/users/OndraZizka/following{/other_user}",
    "gists_url" : "https://api.github.com/users/OndraZizka/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/OndraZizka/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/OndraZizka/subscriptions",
    "organizations_url" : "https://api.github.com/users/OndraZizka/orgs",
    "repos_url" : "https://api.github.com/users/OndraZizka/repos",
    "events_url" : "https://api.github.com/users/OndraZizka/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/OndraZizka/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2013-05-03T16:27:44Z",
  "updated_at" : "2013-05-04T12:12:51Z",
  "closed_at" : null,
  "body" : "In certain scenarios, it would be very handy to be able to add custom data to the xml report.\r\nExamples:\r\n- Mapping the test to set of requirements\r\n- Adding paths of screenshots taken during the test\r\n- Metrics taken during the test\r\n\r\nIt could be either taken from static data - annotations, or through an API.\r\n\r\n@Test @CustomReportData(\"foo=bar\")\r\nfooStatic() { ... }\r\n\r\nfooDynamic(){\r\n    this.setCustomReportData(\"name\", \"value\")\r\n}"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/673",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/673/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/673/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/673/events",
  "html_url" : "https://github.com/junit-team/junit/issues/673",
  "id" : 13962862,
  "number" : 673,
  "title" : "JUnit 4.12 issue when using theory + enum type + DataPoint that contains a null",
  "user" : {
    "login" : "willix",
    "id" : 1015622,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1015622?",
    "gravatar_id" : "d6164d58cc3cd615e56bfa2c141123e7",
    "url" : "https://api.github.com/users/willix",
    "html_url" : "https://github.com/willix",
    "followers_url" : "https://api.github.com/users/willix/followers",
    "following_url" : "https://api.github.com/users/willix/following{/other_user}",
    "gists_url" : "https://api.github.com/users/willix/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/willix/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/willix/subscriptions",
    "organizations_url" : "https://api.github.com/users/willix/orgs",
    "repos_url" : "https://api.github.com/users/willix/repos",
    "events_url" : "https://api.github.com/users/willix/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/willix/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2013-05-04T10:39:36Z",
  "updated_at" : "2013-09-04T22:38:13Z",
  "closed_at" : null,
  "body" : "I have a Theory with a parameter list that includes a String, a boolean, and an\r\nenum. The latter 2 should be automatically assigned and should not need any\r\nexplicit @DataPoint declaration (per the release note description below. When I\r\nrun the test, the enum param is assigned the null value instead of being\r\nassigned each value of the enum, and I'm not sure why this is not working for\r\nme. I would appreciate any help you can offer, please.\r\n\r\nI cloned master from here:\r\n\r\nhttps://github.com/junit-team/junit\r\n\r\n...and looked at the JUnit 4.12 release notes:\r\n\r\nhttps://github.com/junit-team/junit/wiki/4.12-release-notes\r\n\r\n...and scrolled-down to pull request #654 which says:\r\n\r\n\"Any theory method parameters with boolean or enum types that can't be supplied\r\nwith values by any other sources will be automatically supplied with default\r\nvalues: true and false, or every value of the given enum. If other explicitly\r\ndefined values are available (e.g. from a specified ParameterSupplier or some\r\nDataPoints method in the theory class), only those explicitly defined values\r\nwill be used.\"\r\n\r\nOn that same release notes page, I also see the comment under pull request #549,\r\nwhich says that a @DataPoint-annotated array field can contain null values.\r\n\r\nSo here's my test:\r\n\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.runner.RunWith;\r\n\r\n\r\n@RunWith(Theories.class)\r\npublic class QuickTest {\r\n\r\n@DataPoints\r\npublic static String[] platforms = new String[]{\"windows\", \"linux\", null};\r\n\r\npublic static enum JDKS {\r\nJDK6,\r\nJDK7,\r\n}\r\n\r\n@Theory\r\npublic void testFoo(String platform, boolean truth, JDKS j) throws Exception {\r\nSystem.out.println(platform + \":\" + truth + \":\" + j);\r\n}\r\n\r\n}\r\n\r\n...and here's the output:\r\nwindows:true:null\r\nwindows:false:null\r\nlinux:true:null\r\nlinux:false:null\r\nnull:true:null\r\nnull:false:null\r\n\r\n...which is not what I expected... I expected the 3rd value to be JDK6 or JDK7.\r\nI run a 2nd test, but this time I remove the null array element from the\r\n'platforms' field, and the results are expected:\r\n\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.runner.RunWith;\r\n\r\n\r\n@RunWith(Theories.class)\r\npublic class QuickTest {\r\n\r\n@DataPoints\r\npublic static String[] platforms = new String[]{\"windows\", \"linux\"};\r\n\r\npublic static enum JDKS {\r\nJDK6,\r\nJDK7,\r\n}\r\n\r\n@Theory\r\npublic void testFoo(String platform, boolean truth, JDKS j) throws Exception {\r\nSystem.out.println(platform + \":\" + truth + \":\" + j);\r\n}\r\n\r\n}\r\n\r\n\r\n...which results in:\r\nwindows:true:JDK6\r\nwindows:true:JDK7\r\nwindows:false:JDK6\r\nwindows:false:JDK7\r\nlinux:true:JDK6\r\nlinux:true:JDK7\r\nlinux:false:JDK6\r\nlinux:false:JDK7\r\n\r\nCool. But now just for fun, I remove the 'platform' param from testFoo and I\r\nrestore the null array element to 'platforms' field. Since there is no longer\r\nany String param in the param list (and since String is a final class so there's\r\nno possibility of an assignable subclass), I expect that the 'platforms'\r\nDataPoint will just be silently ignored and I would get the expected output. But\r\nI actually see the unexpected output, as if a null array element that exists in\r\na field (that's not even used in the Theory's param list) is affecting the\r\nvalues of a totally different type, the enum type (causing the enum param to\r\nreceive only a null value):\r\n\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.runner.RunWith;\r\n\r\n\r\n@RunWith(Theories.class)\r\npublic class QuickTest {\r\n\r\n@DataPoints\r\npublic static String[] platforms = new String[]{\"windows\", \"linux\", null};\r\n\r\npublic static enum JDKS {\r\nJDK6,\r\nJDK7,\r\n}\r\n\r\n@Theory\r\npublic void testFoo(boolean truth, JDKS j) throws Exception {\r\nSystem.out.println(truth + \":\" + j);\r\n}\r\n\r\n}\r\n\r\n...which results in:\r\ntrue:null\r\nfalse:null\r\n\r\nMy understanding is that this part of JUnit is relevant to recent work on theories by @pimterry.\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/674",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/674/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/674/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/674/events",
  "html_url" : "https://github.com/junit-team/junit/issues/674",
  "id" : 14103466,
  "number" : 674,
  "title" : "TestWatcher should fail the test if used as a class rule",
  "user" : {
    "login" : "phoenix384",
    "id" : 3883662,
    "avatar_url" : "https://avatars.githubusercontent.com/u/3883662?",
    "gravatar_id" : "4307c4c43032628aede02fd4e954bf1b",
    "url" : "https://api.github.com/users/phoenix384",
    "html_url" : "https://github.com/phoenix384",
    "followers_url" : "https://api.github.com/users/phoenix384/followers",
    "following_url" : "https://api.github.com/users/phoenix384/following{/other_user}",
    "gists_url" : "https://api.github.com/users/phoenix384/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/phoenix384/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/phoenix384/subscriptions",
    "organizations_url" : "https://api.github.com/users/phoenix384/orgs",
    "repos_url" : "https://api.github.com/users/phoenix384/repos",
    "events_url" : "https://api.github.com/users/phoenix384/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/phoenix384/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2013-05-08T14:27:21Z",
  "updated_at" : "2014-03-13T20:49:06Z",
  "closed_at" : "2014-03-13T20:49:06Z",
  "body" : "Using an instance of TestWatcher as a ClassRule, the test is reported as success if e.g. the constructor of the test class throws an exception.\r\nSimplified example:\r\n\r\n\timport org.junit.ClassRule;\r\n\timport org.junit.Test;\r\n\timport org.junit.rules.TestWatcher;\r\n\timport org.junit.runner.Description;\r\n\t\r\n\tpublic class BrokenTest {\r\n\t\t@ClassRule\r\n\t\tpublic static TestWatcher watcher = new TestWatcher() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tprotected void succeeded(Description description) {\r\n\t\t\t\tSystem.out.println(\"succeeded\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tprotected void failed(Throwable e, Description description) {\r\n\t\t\t\tSystem.out.println(\"failed\");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tpublic BrokenTest() {\r\n\t\t\tthrow new RuntimeException(); // Placeholder for an action going wrong\r\n\t\t}\r\n\t\t\r\n\t\t@Test\r\n\t\tpublic void test() {\r\n\t\t\tassertTrue(true); // irrelevant\r\n\t\t}\r\n\t}\r\n\r\nWhen executing this the console says \"succeeded\". I know it's a programming error but this is also definitely not a succeeded test."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/675",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/675/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/675/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/675/events",
  "html_url" : "https://github.com/junit-team/junit/pull/675",
  "id" : 14139986,
  "number" : 675,
  "title" : "Test class for String Comparison Compactors, and off-by-one refactoring of compactor.",
  "user" : {
    "login" : "avandeursen",
    "id" : 220701,
    "avatar_url" : "https://avatars.githubusercontent.com/u/220701?",
    "gravatar_id" : "5414357263ef617c7ab3eb067c22412d",
    "url" : "https://api.github.com/users/avandeursen",
    "html_url" : "https://github.com/avandeursen",
    "followers_url" : "https://api.github.com/users/avandeursen/followers",
    "following_url" : "https://api.github.com/users/avandeursen/following{/other_user}",
    "gists_url" : "https://api.github.com/users/avandeursen/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/avandeursen/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/avandeursen/subscriptions",
    "organizations_url" : "https://api.github.com/users/avandeursen/orgs",
    "repos_url" : "https://api.github.com/users/avandeursen/repos",
    "events_url" : "https://api.github.com/users/avandeursen/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/avandeursen/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2013-05-09T09:41:44Z",
  "updated_at" : "2013-05-09T16:01:19Z",
  "closed_at" : "2013-05-09T16:01:19Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/675",
    "html_url" : "https://github.com/junit-team/junit/pull/675",
    "diff_url" : "https://github.com/junit-team/junit/pull/675.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/675.patch"
  },
  "body" : "Added 12 testcases for compacting failure comparisons,  and refactored an off-by-one inconsistency.\r\n\r\nWhen String equality assertions fail, JUnit highlights string differences using formatting such as `\"abc[pqr]…\"`.\r\n\r\nThis string compacting is fairly tricky and the current implementation was only tested incompletely and indirectly via the AssertionTest class.\r\n\r\nI took the old tests from [junit.tests.framework.ComparisonCompactorTest](src/test/java/junit/tests/framework/ComparisonCompactorTest.java), and updated them to a new (parameterized) tests actually running on the `org.junit` compactor.\r\n\r\nWhile running branch coverage analysis, it became appearant that  in the `ComparisonFailure` class  the `fSuffix` condition in `compactString` could never be false:\r\n\r\n           if (fPrefix > 0) {\r\n               result = computeCommonPrefix() + result;\r\n           }\r\n           if (fSuffix > 0) {\r\n                result = result + computeCommonSuffix();\r\n           }\r\n \r\nThe reason was an off-by-one error in the computation of `fSuffix`, making it always greater than or equal to 1, but never 0 (unlike `fPrefix`, which can be zero).\r\n\r\nI fixed the off by one inconsistency, replacing four \"+1\" occurrences\r\nby one missing \"-1\"."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/676",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/676/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/676/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/676/events",
  "html_url" : "https://github.com/junit-team/junit/issues/676",
  "id" : 14358331,
  "number" : 676,
  "title" : "Dependency to org.hamcrest.CoreMatchers is still available in JUnit.",
  "user" : {
    "login" : "Tibor17",
    "id" : 1045063,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1045063?",
    "gravatar_id" : "e5db3e98a858066748db3f817be7bc01",
    "url" : "https://api.github.com/users/Tibor17",
    "html_url" : "https://github.com/Tibor17",
    "followers_url" : "https://api.github.com/users/Tibor17/followers",
    "following_url" : "https://api.github.com/users/Tibor17/following{/other_user}",
    "gists_url" : "https://api.github.com/users/Tibor17/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/Tibor17/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/Tibor17/subscriptions",
    "organizations_url" : "https://api.github.com/users/Tibor17/orgs",
    "repos_url" : "https://api.github.com/users/Tibor17/repos",
    "events_url" : "https://api.github.com/users/Tibor17/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/Tibor17/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 8,
  "created_at" : "2013-05-15T13:27:59Z",
  "updated_at" : "2013-06-04T15:48:46Z",
  "closed_at" : "2013-06-04T15:48:46Z",
  "body" : "We are still calling static methods from class `org.hamcrest.CoreMatchers` in Junit, however these calls can be substituted by org.hamcrest.core.* matchers as it first seems.\r\n\r\nThe reason why we should not use CoreMatchers class is that the new Hamcrest deleted this class from hamcrest-core jar.\r\n\r\nI am pointing to Junit usability in projects where new Hamcrest broke backward compatibility. Just navigate to this discussion where I wanted a requestor to use ExpectedException rule but it was not possible due to this problem that new Hamcrest does not have CoreMatchers but the JUnit binary is still referencing such class:\r\n\r\nhttps://github.com/mmichaelis/JavaHamcrest/commit/930813b7c50c0b98ecca590dbbfc3f62addc2750#commitcomment-3215178\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/677",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/677/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/677/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/677/events",
  "html_url" : "https://github.com/junit-team/junit/issues/677",
  "id" : 14449867,
  "number" : 677,
  "title" : "Run a single test from a parameterized testclass by setting an environment variable.",
  "user" : {
    "login" : "ge0ffrey",
    "id" : 176880,
    "avatar_url" : "https://avatars.githubusercontent.com/u/176880?",
    "gravatar_id" : "27147a6679a4bfb6461ff1c0ae10473e",
    "url" : "https://api.github.com/users/ge0ffrey",
    "html_url" : "https://github.com/ge0ffrey",
    "followers_url" : "https://api.github.com/users/ge0ffrey/followers",
    "following_url" : "https://api.github.com/users/ge0ffrey/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ge0ffrey/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ge0ffrey/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ge0ffrey/subscriptions",
    "organizations_url" : "https://api.github.com/users/ge0ffrey/orgs",
    "repos_url" : "https://api.github.com/users/ge0ffrey/repos",
    "events_url" : "https://api.github.com/users/ge0ffrey/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ge0ffrey/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/parameterized",
    "name" : "parameterized",
    "color" : "0052cc"
  } ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2013-05-17T12:26:29Z",
  "updated_at" : "2014-02-12T15:11:32Z",
  "closed_at" : null,
  "body" : "See [this question on stackoverflow](http://stackoverflow.com/questions/16517300/junit-parameterized-tests-how-do-i-run-only-1-specific-test-from-intellij-eclip).\r\n\r\nIt seems there's no way to do this. If there's a way, it should be documented on the parameterized testclass wiki."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/678",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/678/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/678/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/678/events",
  "html_url" : "https://github.com/junit-team/junit/pull/678",
  "id" : 14494957,
  "number" : 678,
  "title" : "Relicense JUnit from CPL to EPL",
  "user" : {
    "login" : "marschall",
    "id" : 471021,
    "avatar_url" : "https://avatars.githubusercontent.com/u/471021?",
    "gravatar_id" : "568c8fb2e5cbfe951af7cd65b7a997f8",
    "url" : "https://api.github.com/users/marschall",
    "html_url" : "https://github.com/marschall",
    "followers_url" : "https://api.github.com/users/marschall/followers",
    "following_url" : "https://api.github.com/users/marschall/following{/other_user}",
    "gists_url" : "https://api.github.com/users/marschall/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/marschall/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/marschall/subscriptions",
    "organizations_url" : "https://api.github.com/users/marschall/orgs",
    "repos_url" : "https://api.github.com/users/marschall/repos",
    "events_url" : "https://api.github.com/users/marschall/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/marschall/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2013-05-19T10:55:41Z",
  "updated_at" : "2013-07-03T21:21:14Z",
  "closed_at" : "2013-05-24T19:34:58Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/678",
    "html_url" : "https://github.com/junit-team/junit/pull/678",
    "diff_url" : "https://github.com/junit-team/junit/pull/678.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/678.patch"
  },
  "body" : "EPL is the successor version of the CPL this makes re-licensing\r\npossible without seeking the approval of all contributors.\r\n\r\nCPL is actively hurting JUnit adaptation, it the following cases the\r\ndeciding factor against JUnit was CPL. In both cases EPL would have\r\nbeen fine.\r\n* Netbeans can't ship JUnit [4]\r\n* OpenJDK uses TestNG instead of JUnit [5]\r\n\r\nMike Milinkovich from the Eclipse Foundation wrote [1]\r\n\r\n> Back in 2009, the CPL was superseded by the EPL. This means that the\r\n> EPL is the successor version of the CPL. It also means that using the\r\n> CPL is the licensing equivalent of using deprecated code.\r\n>\r\n> Because the EPL is the successor version to the CPL, the \"new version\r\n> re-licensing\" clause in Section 7 of the CPL applies. In other words,\r\n> you can re-license your project without seeking the approval of all\r\n> of your contributors.\r\n> The CPL and EPL basically differ by about one sentence, which you can\r\n> see here. The difference relates to the scope of patent licenses\r\n> terminated should someone sue another party for patent infringement.\r\n> This is the kind of stuff that lawyers love, but most developers\r\n> don't really care about.\r\n\r\nOn the migration from CPL to EPL Mike Milinkovich wrote [2]\r\n\r\n> There was a two step process that was followed to make this happen.\r\n> First, following the terms of the CPL, IBM assigned the\r\n> responsibility to serve as the Agreement Steward of the CPL to the\r\n> Eclipse Foundation. Second, the Eclipse Foundation officially\r\n> recognized the EPL 1.0 as the new version of the CPL 1.0. In OSI\r\n> license terminology, the EPL now supersedes the CPL.\r\n>\r\n> A quick read of the two licenses will quickly show that they are very\r\n> very close. Other than their names and (previously) their Agreement\r\n> Stewards, the only substantive difference is the breadth of the\r\n> patent license termination in the event of a patent law suit. (See\r\n> the second paragraph of Section 7.) For more information on the\r\n> relationship between the CPL and the EPL see the EPL FAQ.\r\n\r\nYou can find more information about the difference at [3].\r\n\r\nThe new `LICENSE.txt` is based on a plain text version of the EPL with\r\nformatted so that the diff is a clean as possible.\r\n\r\nI'll submit another pull request for the gh-pages branch.\r\n\r\n [1] http://mmilinkov.wordpress.com/2013/02/13/jruby-moves-to-the-epl/\r\n [2] http://mmilinkov.wordpress.com/2009/04/16/one-small-step-towards-reducing-license-proliferation/\r\n [3] http://www.eclipse.org/legal/eplfaq.php#EPLDIFFER\r\n [4] https://netbeans.org/community/releases/70/relnotes.html#deprecated\r\n [5] http://openjdk.java.net/jtreg/build.html"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/679",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/679/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/679/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/679/events",
  "html_url" : "https://github.com/junit-team/junit/pull/679",
  "id" : 14495192,
  "number" : 679,
  "title" : "Relicense JUnit from CPL to EPL (gh-pages)",
  "user" : {
    "login" : "marschall",
    "id" : 471021,
    "avatar_url" : "https://avatars.githubusercontent.com/u/471021?",
    "gravatar_id" : "568c8fb2e5cbfe951af7cd65b7a997f8",
    "url" : "https://api.github.com/users/marschall",
    "html_url" : "https://github.com/marschall",
    "followers_url" : "https://api.github.com/users/marschall/followers",
    "following_url" : "https://api.github.com/users/marschall/following{/other_user}",
    "gists_url" : "https://api.github.com/users/marschall/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/marschall/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/marschall/subscriptions",
    "organizations_url" : "https://api.github.com/users/marschall/orgs",
    "repos_url" : "https://api.github.com/users/marschall/repos",
    "events_url" : "https://api.github.com/users/marschall/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/marschall/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2013-05-19T11:23:07Z",
  "updated_at" : "2013-05-24T19:35:50Z",
  "closed_at" : "2013-05-24T19:35:50Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/679",
    "html_url" : "https://github.com/junit-team/junit/pull/679",
    "diff_url" : "https://github.com/junit-team/junit/pull/679.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/679.patch"
  },
  "body" : "This is the gh-pages version of #678"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/680",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/680/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/680/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/680/events",
  "html_url" : "https://github.com/junit-team/junit/pull/680",
  "id" : 14643710,
  "number" : 680,
  "title" : "fix typo in javadoc for MethodRule",
  "user" : {
    "login" : "UrsMetz",
    "id" : 1553875,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1553875?",
    "gravatar_id" : "f64ed91d2d272ae95bbc53a8b3476611",
    "url" : "https://api.github.com/users/UrsMetz",
    "html_url" : "https://github.com/UrsMetz",
    "followers_url" : "https://api.github.com/users/UrsMetz/followers",
    "following_url" : "https://api.github.com/users/UrsMetz/following{/other_user}",
    "gists_url" : "https://api.github.com/users/UrsMetz/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/UrsMetz/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/UrsMetz/subscriptions",
    "organizations_url" : "https://api.github.com/users/UrsMetz/orgs",
    "repos_url" : "https://api.github.com/users/UrsMetz/repos",
    "events_url" : "https://api.github.com/users/UrsMetz/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/UrsMetz/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2013-05-22T20:29:55Z",
  "updated_at" : "2013-05-23T14:52:58Z",
  "closed_at" : "2013-05-23T14:52:52Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/680",
    "html_url" : "https://github.com/junit-team/junit/pull/680",
    "diff_url" : "https://github.com/junit-team/junit/pull/680.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/680.patch"
  },
  "body" : "I think there is a typo in the JavaDoc for the MethodRule: Instead of\r\n@param target The object on _with_ the method will be run.\r\nthe JavaDoc should say\r\n@param target The object on _which_ the method will be run."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/681",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/681/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/681/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/681/events",
  "html_url" : "https://github.com/junit-team/junit/issues/681",
  "id" : 14742216,
  "number" : 681,
  "title" : "Assert not empty for collections?",
  "user" : {
    "login" : "tuckerpm",
    "id" : 4295924,
    "avatar_url" : "https://avatars.githubusercontent.com/u/4295924?",
    "gravatar_id" : "0acb11aefb86bc9b7759167d8ba3cf50",
    "url" : "https://api.github.com/users/tuckerpm",
    "html_url" : "https://github.com/tuckerpm",
    "followers_url" : "https://api.github.com/users/tuckerpm/followers",
    "following_url" : "https://api.github.com/users/tuckerpm/following{/other_user}",
    "gists_url" : "https://api.github.com/users/tuckerpm/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/tuckerpm/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/tuckerpm/subscriptions",
    "organizations_url" : "https://api.github.com/users/tuckerpm/orgs",
    "repos_url" : "https://api.github.com/users/tuckerpm/repos",
    "events_url" : "https://api.github.com/users/tuckerpm/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/tuckerpm/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2013-05-24T19:59:29Z",
  "updated_at" : "2014-02-10T15:18:05Z",
  "closed_at" : "2014-02-10T15:18:05Z",
  "body" : "Something like the following:\r\n   public static void assertNotEmpty(String message, Collection<?> collection) {\r\n      assertFalse(message, collection.isEmpty());\r\n   }\r\n\r\nI didn't see anything but it would be nice to have this kind of support build in."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/682",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/682/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/682/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/682/events",
  "html_url" : "https://github.com/junit-team/junit/pull/682",
  "id" : 14776516,
  "number" : 682,
  "title" : "Fix for #676 Free of hamcrest CoreMatchers",
  "user" : {
    "login" : "Tibor17",
    "id" : 1045063,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1045063?",
    "gravatar_id" : "e5db3e98a858066748db3f817be7bc01",
    "url" : "https://api.github.com/users/Tibor17",
    "html_url" : "https://github.com/Tibor17",
    "followers_url" : "https://api.github.com/users/Tibor17/followers",
    "following_url" : "https://api.github.com/users/Tibor17/following{/other_user}",
    "gists_url" : "https://api.github.com/users/Tibor17/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/Tibor17/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/Tibor17/subscriptions",
    "organizations_url" : "https://api.github.com/users/Tibor17/orgs",
    "repos_url" : "https://api.github.com/users/Tibor17/repos",
    "events_url" : "https://api.github.com/users/Tibor17/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/Tibor17/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 0,
  "created_at" : "2013-05-26T23:18:25Z",
  "updated_at" : "2013-07-02T22:13:36Z",
  "closed_at" : "2013-05-26T23:30:15Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/682",
    "html_url" : "https://github.com/junit-team/junit/pull/682",
    "diff_url" : "https://github.com/junit-team/junit/pull/682.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/682.patch"
  },
  "body" : "This is a fix for #676 (Dependency to org.hamcrest.CoreMatchers is still available in JUnit.).\r\nSimply substituted CoreMatchers by a real matcher in the import sections .\r\nThis will avoid problem when Hamcrest without CoreMatchers class could not be used together with current JUnit library."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/683",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/683/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/683/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/683/events",
  "html_url" : "https://github.com/junit-team/junit/pull/683",
  "id" : 14776780,
  "number" : 683,
  "title" : "Fix for #676 Free of hamcrest CoreMatchers",
  "user" : {
    "login" : "Tibor17",
    "id" : 1045063,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1045063?",
    "gravatar_id" : "e5db3e98a858066748db3f817be7bc01",
    "url" : "https://api.github.com/users/Tibor17",
    "html_url" : "https://github.com/Tibor17",
    "followers_url" : "https://api.github.com/users/Tibor17/followers",
    "following_url" : "https://api.github.com/users/Tibor17/following{/other_user}",
    "gists_url" : "https://api.github.com/users/Tibor17/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/Tibor17/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/Tibor17/subscriptions",
    "organizations_url" : "https://api.github.com/users/Tibor17/orgs",
    "repos_url" : "https://api.github.com/users/Tibor17/repos",
    "events_url" : "https://api.github.com/users/Tibor17/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/Tibor17/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2013-05-26T23:47:43Z",
  "updated_at" : "2013-07-02T22:13:36Z",
  "closed_at" : "2013-06-03T19:35:50Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/683",
    "html_url" : "https://github.com/junit-team/junit/pull/683",
    "diff_url" : "https://github.com/junit-team/junit/pull/683.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/683.patch"
  },
  "body" : "This is a fix for #676 (Dependency to org.hamcrest.CoreMatchers is still available in JUnit.).\r\nSubstituted CoreMatchers by delegated matchers in the import sections .\r\nThis will avoid problem when Hamcrest without CoreMatchers class cannot be used together with current JUnit library.\r\nAll tests passed (mvn test)."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/684",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/684/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/684/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/684/events",
  "html_url" : "https://github.com/junit-team/junit/pull/684",
  "id" : 14831624,
  "number" : 684,
  "title" : "Add AnnotationValidator, and validation checks for Category (fix for issue #93)",
  "user" : {
    "login" : "codingricky",
    "id" : 1692019,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1692019?",
    "gravatar_id" : "21686b05ef3fabf1a5e723c0eee6a322",
    "url" : "https://api.github.com/users/codingricky",
    "html_url" : "https://github.com/codingricky",
    "followers_url" : "https://api.github.com/users/codingricky/followers",
    "following_url" : "https://api.github.com/users/codingricky/following{/other_user}",
    "gists_url" : "https://api.github.com/users/codingricky/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/codingricky/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/codingricky/subscriptions",
    "organizations_url" : "https://api.github.com/users/codingricky/orgs",
    "repos_url" : "https://api.github.com/users/codingricky/repos",
    "events_url" : "https://api.github.com/users/codingricky/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/codingricky/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 35,
  "created_at" : "2013-05-28T09:46:24Z",
  "updated_at" : "2013-10-24T00:38:42Z",
  "closed_at" : "2013-10-24T00:38:22Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/684",
    "html_url" : "https://github.com/junit-team/junit/pull/684",
    "diff_url" : "https://github.com/junit-team/junit/pull/684.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/684.patch"
  },
  "body" : "Any feedback would be greatly appreciated. Thanks!"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/685",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/685/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/685/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/685/events",
  "html_url" : "https://github.com/junit-team/junit/pull/685",
  "id" : 14867124,
  "number" : 685,
  "title" : "Added .DS_Store",
  "user" : {
    "login" : "ChrisMukherjee",
    "id" : 4418784,
    "avatar_url" : "https://avatars.githubusercontent.com/u/4418784?",
    "gravatar_id" : "84682a7c8e23fb4a724207c96dde27fb",
    "url" : "https://api.github.com/users/ChrisMukherjee",
    "html_url" : "https://github.com/ChrisMukherjee",
    "followers_url" : "https://api.github.com/users/ChrisMukherjee/followers",
    "following_url" : "https://api.github.com/users/ChrisMukherjee/following{/other_user}",
    "gists_url" : "https://api.github.com/users/ChrisMukherjee/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/ChrisMukherjee/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/ChrisMukherjee/subscriptions",
    "organizations_url" : "https://api.github.com/users/ChrisMukherjee/orgs",
    "repos_url" : "https://api.github.com/users/ChrisMukherjee/repos",
    "events_url" : "https://api.github.com/users/ChrisMukherjee/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/ChrisMukherjee/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2013-05-28T23:36:06Z",
  "updated_at" : "2013-05-29T03:02:13Z",
  "closed_at" : "2013-05-29T03:01:54Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/685",
    "html_url" : "https://github.com/junit-team/junit/pull/685",
    "diff_url" : "https://github.com/junit-team/junit/pull/685.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/685.patch"
  },
  "body" : ".DS_Store is a Mac OSX junk file that is automatically added in folders"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/686",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/686/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/686/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/686/events",
  "html_url" : "https://github.com/junit-team/junit/issues/686",
  "id" : 14910068,
  "number" : 686,
  "title" : "Enhance @Test(timeout) javadoc",
  "user" : {
    "login" : "dsaff",
    "id" : 46155,
    "avatar_url" : "https://avatars.githubusercontent.com/u/46155?",
    "gravatar_id" : "84fdeb898b5928d3234ff7e19db710f3",
    "url" : "https://api.github.com/users/dsaff",
    "html_url" : "https://github.com/dsaff",
    "followers_url" : "https://api.github.com/users/dsaff/followers",
    "following_url" : "https://api.github.com/users/dsaff/following{/other_user}",
    "gists_url" : "https://api.github.com/users/dsaff/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/dsaff/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/dsaff/subscriptions",
    "organizations_url" : "https://api.github.com/users/dsaff/orgs",
    "repos_url" : "https://api.github.com/users/dsaff/repos",
    "events_url" : "https://api.github.com/users/dsaff/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/dsaff/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 7,
  "created_at" : "2013-05-29T20:18:00Z",
  "updated_at" : "2014-01-29T07:03:32Z",
  "closed_at" : "2014-01-29T07:03:24Z",
  "body" : "Proposed new wording from s_soloff@bellsouth.net:\r\n\r\nTHREAD SAFETY WARNING. Test methods with a timeout parameter are run in a thread other than the thread which runs the fixture's @Before and @After methods. This may yield different behavior for code that is not thread safe when compared to the same test method without a timeout parameter. Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the same thread as the fixture's @Before and @After methods.\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/687",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/687/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/687/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/687/events",
  "html_url" : "https://github.com/junit-team/junit/issues/687",
  "id" : 15008339,
  "number" : 687,
  "title" : "Undocumented change to ExpectedException in JUnit 4.11 changes default behavior when expected class is AssertionError.",
  "user" : {
    "login" : "xrisfg",
    "id" : 4582224,
    "avatar_url" : "https://avatars.githubusercontent.com/u/4582224?",
    "gravatar_id" : "96cdf9712d06c91f077e852892a6bca2",
    "url" : "https://api.github.com/users/xrisfg",
    "html_url" : "https://github.com/xrisfg",
    "followers_url" : "https://api.github.com/users/xrisfg/followers",
    "following_url" : "https://api.github.com/users/xrisfg/following{/other_user}",
    "gists_url" : "https://api.github.com/users/xrisfg/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/xrisfg/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/xrisfg/subscriptions",
    "organizations_url" : "https://api.github.com/users/xrisfg/orgs",
    "repos_url" : "https://api.github.com/users/xrisfg/repos",
    "events_url" : "https://api.github.com/users/xrisfg/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/xrisfg/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2013-05-31T18:45:01Z",
  "updated_at" : "2013-10-16T22:32:17Z",
  "closed_at" : "2013-10-16T22:32:17Z",
  "body" : "Prior to JUnit 4.11, a test like this passes:\r\n\r\n@Rule\r\npublic ExpectedException thrown = ExpectedException.none();\r\n\r\n@Test\r\npublic void test() {\r\n  thrown.expect(AssertionError.class);\r\n  assertTrue(false);\r\n}\r\n\r\nWith JUnit 4.11, tests like this suddenly fail with the thrown AssertionError, instead of being intercepted and verified by ExpectedException.\r\n\r\nOn inspecting the code, we see that the behavior of ExpectedException was changed to conditionally include AssertionErrors as a valid Throwable,and that the default behavior was changed from prior versions to ignore AssertionError. The flag handleAssertionErrors defaults to false; a call to the new handleAssertionErrors() method is needed to force it to true. This call is required even whenAssertionError is explicitly expected in the call to expect(). \r\n\r\nWe have test frameworks that throw AssertionErrors, and unit tests for those frameworks that verify that the expected AssertIionErrors are thrown. All those tests fail with JUnit 4.11, unless the tests are changed to force handleAssertionErrors=true.\r\n\r\n1) This change in the default behavior should be documented in the JUnit 4.11 Release Notes. We spent considerable time tracking down why our test framework unit tests were suddenly failing.\r\n2) The behavior should be fixed, either by restoring the previous default behavior (which presumably was changed to fix some other problem?), or to set handleAssertionErrors=true when AssertionError is explicitly given as the expected class."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/688",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/688/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/688/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/688/events",
  "html_url" : "https://github.com/junit-team/junit/issues/688",
  "id" : 15060476,
  "number" : 688,
  "title" : "AssumeTrue and AssumeFalse do not work as documented.",
  "user" : {
    "login" : "Martin-Spamer",
    "id" : 2852862,
    "avatar_url" : "https://avatars.githubusercontent.com/u/2852862?",
    "gravatar_id" : "9b09f3f8d813d899d516943cd0220907",
    "url" : "https://api.github.com/users/Martin-Spamer",
    "html_url" : "https://github.com/Martin-Spamer",
    "followers_url" : "https://api.github.com/users/Martin-Spamer/followers",
    "following_url" : "https://api.github.com/users/Martin-Spamer/following{/other_user}",
    "gists_url" : "https://api.github.com/users/Martin-Spamer/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/Martin-Spamer/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/Martin-Spamer/subscriptions",
    "organizations_url" : "https://api.github.com/users/Martin-Spamer/orgs",
    "repos_url" : "https://api.github.com/users/Martin-Spamer/repos",
    "events_url" : "https://api.github.com/users/Martin-Spamer/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/Martin-Spamer/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2013-06-03T10:28:29Z",
  "updated_at" : "2013-06-04T15:41:54Z",
  "closed_at" : null,
  "body" : "\r\n\r\npublic class AssumptionTests {\r\n\r\n\t@Test\r\n\tpublic void assumeTruePassTest1()\r\n\t{\r\n\t\t// If called with an expression evaluating to false, the test will halt and be ignored.\r\n\t\tAssume.assumeTrue(true);\t// should pass\r\n\t\t\t\t\t\t\t\t\t// actual is test is passed.\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void assumeTruePassTest2()\r\n\t{\r\n\t\t// If called with an expression evaluating to false, the test will halt and be ignored.\r\n\t\tAssume.assumeTrue(true);\t// should pass\r\n\t\tAssert.fail();\t\t\t\t// should fail test\r\n\t\t\t\t\t\t\t\t\t// actual is test ignored.\r\n\t}\r\n\r\n\t@Test // (expected = AssumptionViolatedException)\r\n\tpublic void assumeTrueFailTest1()\r\n\t{\r\n\t\t// If called with an expression evaluating to false, the test will halt and be ignored.\r\n\t\tAssume.assumeTrue(false);\t// should fail with ignored\r\n\t\t\t\t\t\t\t\t\t// actual result is pass.\r\n\t}\r\n\r\n\t@Test // (expected = AssumptionViolatedException)\r\n\tpublic void assumeTrueFailTest2()\r\n\t{\r\n\t\t// If called with an expression evaluating to false, the test will halt and be ignored.\r\n\t\tAssume.assumeTrue(false);\t// should fail with ignored.\r\n\t\tAssert.fail();\t\t\t\t// should not be reached.\r\n\t\t\t\t\t\t\t\t\t// actual result is pass.\r\n\t}\r\n}\r\n\r\nThe AssumptionViolatedException appears to be correctly thrown, but is handled incorrectly.  Perhaps org.junit.internal.AssumptionViolatedException\r\nshould be moved to non-internal package and require explicit handling.\r\n\r\nThis is not \r\n\r\n\r\n"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/689",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/689/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/689/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/689/events",
  "html_url" : "https://github.com/junit-team/junit/issues/689",
  "id" : 15070521,
  "number" : 689,
  "title" : "Request for Clarification / Roadmap / Documentation",
  "user" : {
    "login" : "JohnLockwood",
    "id" : 1295550,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1295550?",
    "gravatar_id" : "e5c0e8fb4ecefe25ca9619935c45ef1b",
    "url" : "https://api.github.com/users/JohnLockwood",
    "html_url" : "https://github.com/JohnLockwood",
    "followers_url" : "https://api.github.com/users/JohnLockwood/followers",
    "following_url" : "https://api.github.com/users/JohnLockwood/following{/other_user}",
    "gists_url" : "https://api.github.com/users/JohnLockwood/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/JohnLockwood/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/JohnLockwood/subscriptions",
    "organizations_url" : "https://api.github.com/users/JohnLockwood/orgs",
    "repos_url" : "https://api.github.com/users/JohnLockwood/repos",
    "events_url" : "https://api.github.com/users/JohnLockwood/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/JohnLockwood/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2013-06-03T14:45:46Z",
  "updated_at" : "2013-06-03T17:35:29Z",
  "closed_at" : "2013-06-03T17:35:10Z",
  "body" : "I'm in the beginning stages of thinking about a project that would rely on working with extensions to JUnit (or in principle another test framework such as TestNG, but JUnit appeared to be a logical place to start because of market share).   I started out trying to extend BlockJUnit4ClassRunner, As I dug into that, most of it appeared to be deprecated, even though the doc says:  \"It is published, and extension and reuse are encouraged, whereas JUnit4ClassRunner was in an internal package, and is now deprecated.\"  However, you can't extend methodBlock since whatever it calls that isn't already private is deprecated, and most of the deprecated methods say \"UseRules\".  \r\n\r\nOK, fair enough, let's start looking into rules:\r\n\r\nOn the Wiki for rules (https://github.com/junit-team/junit/wiki/Rules), TestWatchman is now deprecated, looks like one can't rely on that, and TestWatcher, which replaces it, links to a broken link on a Kent Beck site. \r\n\r\nSo I guess my questions are:\r\n\r\n1) If I were to extend this thing, how would I do it?\r\n\r\n2) Are you sure? Because it looks like any mechanism for extending this won't survive longer than a point release or two.  BlockJUnit4ClassRunner is deprecated in favor of TestWatchman, in favor of TestWatcher, which points to a broken link.\r\n\r\nThanks for any insights you might provide."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/690",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/690/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/690/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/690/events",
  "html_url" : "https://github.com/junit-team/junit/pull/690",
  "id" : 15191141,
  "number" : 690,
  "title" : "Make compilable under Java 1.5.",
  "user" : {
    "login" : "noel-yap",
    "id" : 1414385,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1414385?",
    "gravatar_id" : "3d940f701f1bc6bf922f910258e19698",
    "url" : "https://api.github.com/users/noel-yap",
    "html_url" : "https://github.com/noel-yap",
    "followers_url" : "https://api.github.com/users/noel-yap/followers",
    "following_url" : "https://api.github.com/users/noel-yap/following{/other_user}",
    "gists_url" : "https://api.github.com/users/noel-yap/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/noel-yap/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/noel-yap/subscriptions",
    "organizations_url" : "https://api.github.com/users/noel-yap/orgs",
    "repos_url" : "https://api.github.com/users/noel-yap/repos",
    "events_url" : "https://api.github.com/users/noel-yap/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/noel-yap/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 2,
  "created_at" : "2013-06-05T20:09:43Z",
  "updated_at" : "2013-06-05T22:29:06Z",
  "closed_at" : "2013-06-05T20:34:38Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/690",
    "html_url" : "https://github.com/junit-team/junit/pull/690",
    "diff_url" : "https://github.com/junit-team/junit/pull/690.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/690.patch"
  },
  "body" : ""
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/691",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/691/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/691/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/691/events",
  "html_url" : "https://github.com/junit-team/junit/pull/691",
  "id" : 15197271,
  "number" : 691,
  "title" : "Make compilable under Java 1.5.",
  "user" : {
    "login" : "noel-yap",
    "id" : 1414385,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1414385?",
    "gravatar_id" : "3d940f701f1bc6bf922f910258e19698",
    "url" : "https://api.github.com/users/noel-yap",
    "html_url" : "https://github.com/noel-yap",
    "followers_url" : "https://api.github.com/users/noel-yap/followers",
    "following_url" : "https://api.github.com/users/noel-yap/following{/other_user}",
    "gists_url" : "https://api.github.com/users/noel-yap/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/noel-yap/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/noel-yap/subscriptions",
    "organizations_url" : "https://api.github.com/users/noel-yap/orgs",
    "repos_url" : "https://api.github.com/users/noel-yap/repos",
    "events_url" : "https://api.github.com/users/noel-yap/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/noel-yap/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 1,
  "created_at" : "2013-06-05T22:29:43Z",
  "updated_at" : "2013-06-06T05:22:55Z",
  "closed_at" : "2013-06-06T05:22:55Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/691",
    "html_url" : "https://github.com/junit-team/junit/pull/691",
    "diff_url" : "https://github.com/junit-team/junit/pull/691.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/691.patch"
  },
  "body" : ""
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/692",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/692/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/692/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/692/events",
  "html_url" : "https://github.com/junit-team/junit/issues/692",
  "id" : 15241904,
  "number" : 692,
  "title" : "Allow tests to notify listeners of saved files",
  "user" : {
    "login" : "mc1arke",
    "id" : 1250331,
    "avatar_url" : "https://avatars.githubusercontent.com/u/1250331?",
    "gravatar_id" : "02dbbb6f91bad9a634513450d65f586c",
    "url" : "https://api.github.com/users/mc1arke",
    "html_url" : "https://github.com/mc1arke",
    "followers_url" : "https://api.github.com/users/mc1arke/followers",
    "following_url" : "https://api.github.com/users/mc1arke/following{/other_user}",
    "gists_url" : "https://api.github.com/users/mc1arke/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/mc1arke/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/mc1arke/subscriptions",
    "organizations_url" : "https://api.github.com/users/mc1arke/orgs",
    "repos_url" : "https://api.github.com/users/mc1arke/repos",
    "events_url" : "https://api.github.com/users/mc1arke/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/mc1arke/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 3,
  "created_at" : "2013-06-06T19:55:45Z",
  "updated_at" : "2013-06-08T20:44:45Z",
  "closed_at" : null,
  "body" : "Tests that save files (screenshots, logs, data extracts etc) currently have no way of notifying external programs where these files have been saved, other than possibly by printing a line to a logger or System.out or by writing to a file that other programs are aware of. It would be nice for tests to be able to notify additional events (e.g file saved) to test listeners so that IDEs, CI servers or any other calling program can link to or load these for a user.\r\n\r\nKohsuke Kawaguchi did write a blog post sometime back about this: http://kohsuke.org/?s=junit+attachment which shows the hack created to allow Jenkins to attach files to test reports.\r\n\r\nActually implementing this is a bit of a challenge since tests don't have visibility of listeners. A couple of options I can think of for approaching this:\r\n\r\n1. Allow tests to have a constructor that takes a``` FileListener``` parameter for reporting file event sto (with ```FileListener``` just being a wrapper round a list of ```TestListener```s).\r\n2. Allow test to declare a ```setFileEventListener(FileListener)``` method, possibly from a new ```FileHandlingTest``` interface\r\n3. Create a ```FileListenerRule``` rule that records a list of saved files then throws a ```FilesSaved``` exception which runners pick up (similar to how ```ErrorCollector``` works).\r\n4. Create a special ```FileListenerRule``` rule which runners look for whilst constructing the test and inject any ```TestListener```s into.\r\n\r\n\r\nOut of these options, 1 and 2 seem to be reverting to JUnit3 style structures so I'm not convinced they're particularly suitable. Option 3 isn't brilliant since it's using exceptions to handle flow control for non error scenarios, wouldn't work with custom runners (failures/errors would be reports for file saves) and may cause issues with some Rules. Option 4 wouldn't report file events for any custom runners that didn't inject listeners into the rule but wouldn't cause failures in this scenario, although does require although does require runners interact directly with a particular rule type which some people may object to.\r\n\r\nI'm happy to create some code tor the different options but want to know initial opinions about whether anyone wants this feature, and whether anyone has any strong opinions about how this should (or shouldn't) work."
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/693",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/693/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/693/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/693/events",
  "html_url" : "https://github.com/junit-team/junit/issues/693",
  "id" : 15317713,
  "number" : 693,
  "title" : "ParameterizedAssertionError should extend AssertionError",
  "user" : {
    "login" : "liwx2000",
    "id" : 3276204,
    "avatar_url" : "https://avatars.githubusercontent.com/u/3276204?",
    "gravatar_id" : "04e453be75b340f8effebd114ef844a2",
    "url" : "https://api.github.com/users/liwx2000",
    "html_url" : "https://github.com/liwx2000",
    "followers_url" : "https://api.github.com/users/liwx2000/followers",
    "following_url" : "https://api.github.com/users/liwx2000/following{/other_user}",
    "gists_url" : "https://api.github.com/users/liwx2000/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/liwx2000/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/liwx2000/subscriptions",
    "organizations_url" : "https://api.github.com/users/liwx2000/orgs",
    "repos_url" : "https://api.github.com/users/liwx2000/repos",
    "events_url" : "https://api.github.com/users/liwx2000/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/liwx2000/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ {
    "url" : "https://api.github.com/repos/junit-team/junit/labels/lowhanging",
    "name" : "lowhanging",
    "color" : "d4c5f9"
  } ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 4,
  "created_at" : "2013-06-09T09:49:41Z",
  "updated_at" : "2014-01-07T01:25:22Z",
  "closed_at" : "2014-01-07T01:25:22Z",
  "body" : "Old title was: \"Use Assert in Theory, the testcae status is Error when assert fail, but I expected is failure(in  maven)\"\r\n\r\ncode:\r\n``` java\r\n@RunWith(Theories.class)\r\npublic class TheoryTest {\r\n\r\n\t@DataPoints public static int[] numbers = {1, 2, 3};\r\n\t\r\n\t@Theory\r\n\tpublic void test(int number) {\r\n\t\tAssume.assumeThat(number, Is.is(2));\r\n\t\tAssert.assertThat(number * 10, Is.is(30));\r\n\t}\r\n\t\r\n}\r\n```\r\n\r\noutput(maven):\r\n> Running TheoryTest\r\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.083 sec <<< FAILURE!\r\ntest(TheoryTest)  Time elapsed: 0.022 sec  <<< ERROR!\r\norg.junit.experimental.theories.internal.ParameterizedAssertionError: test(ids[1])\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat org.junit.Assert.assertThat(Assert.java:865)\r\n\tat org.junit.Assert.assertThat(Assert.java:832)\r\n\tat TheoryTest.test(TheoryTest.java:22)\r\n>\r\n>\r\n>Results :\r\n>\r\n>Tests in error: \r\n>   » ParameterizedAssertion test(ids[1])\r\n>\r\n>Tests run: 1, Failures: 0, Errors: 1, Skipped: 0\r\n\r\nI expect: \r\nfailures: 1, errors: 0"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/694",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/694/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/694/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/694/events",
  "html_url" : "https://github.com/junit-team/junit/pull/694",
  "id" : 15318263,
  "number" : 694,
  "title" : "Issue #693,Eclipse and Maven does not recognize ParameterizedAssertionError",
  "user" : {
    "login" : "liwx2000",
    "id" : 3276204,
    "avatar_url" : "https://avatars.githubusercontent.com/u/3276204?",
    "gravatar_id" : "04e453be75b340f8effebd114ef844a2",
    "url" : "https://api.github.com/users/liwx2000",
    "html_url" : "https://github.com/liwx2000",
    "followers_url" : "https://api.github.com/users/liwx2000/followers",
    "following_url" : "https://api.github.com/users/liwx2000/following{/other_user}",
    "gists_url" : "https://api.github.com/users/liwx2000/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/liwx2000/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/liwx2000/subscriptions",
    "organizations_url" : "https://api.github.com/users/liwx2000/orgs",
    "repos_url" : "https://api.github.com/users/liwx2000/repos",
    "events_url" : "https://api.github.com/users/liwx2000/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/liwx2000/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "closed",
  "assignee" : null,
  "milestone" : null,
  "comments" : 14,
  "created_at" : "2013-06-09T10:40:57Z",
  "updated_at" : "2013-12-02T13:48:35Z",
  "closed_at" : "2013-09-18T00:54:43Z",
  "pull_request" : {
    "url" : "https://api.github.com/repos/junit-team/junit/pulls/694",
    "html_url" : "https://github.com/junit-team/junit/pull/694",
    "diff_url" : "https://github.com/junit-team/junit/pull/694.diff",
    "patch_url" : "https://github.com/junit-team/junit/pull/694.patch"
  },
  "body" : "Eclipse and Maven does not recognize ParameterizedAssertionError"
}, {
  "url" : "https://api.github.com/repos/junit-team/junit/issues/695",
  "labels_url" : "https://api.github.com/repos/junit-team/junit/issues/695/labels{/name}",
  "comments_url" : "https://api.github.com/repos/junit-team/junit/issues/695/comments",
  "events_url" : "https://api.github.com/repos/junit-team/junit/issues/695/events",
  "html_url" : "https://github.com/junit-team/junit/issues/695",
  "id" : 15602142,
  "number" : 695,
  "title" : "@Ignore not taking effect when used on an overriden test method",
  "user" : {
    "login" : "triceo",
    "id" : 247403,
    "avatar_url" : "https://avatars.githubusercontent.com/u/247403?",
    "gravatar_id" : "c950743f532471ac34022e92193563c3",
    "url" : "https://api.github.com/users/triceo",
    "html_url" : "https://github.com/triceo",
    "followers_url" : "https://api.github.com/users/triceo/followers",
    "following_url" : "https://api.github.com/users/triceo/following{/other_user}",
    "gists_url" : "https://api.github.com/users/triceo/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/triceo/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/triceo/subscriptions",
    "organizations_url" : "https://api.github.com/users/triceo/orgs",
    "repos_url" : "https://api.github.com/users/triceo/repos",
    "events_url" : "https://api.github.com/users/triceo/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/triceo/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "labels" : [ ],
  "state" : "open",
  "assignee" : null,
  "milestone" : null,
  "comments" : 5,
  "created_at" : "2013-06-16T08:07:03Z",
  "updated_at" : "2013-11-05T01:48:54Z",
  "closed_at" : null,
  "body" : "When I have a test in super class which I then override in subclass and add the Ignore annotation to this overriden test, the test is run anyway. (Not ignored.)\r\n\r\nReproducer for the issue can be found here:\r\nhttps://github.com/triceo/junit/commit/14e5d37f09d7c822d93a172481796524017735ee"
} ]